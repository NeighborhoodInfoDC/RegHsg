"GEN COMM - BANK",
"GEN COMM - FAST FOOD",
"GEN COMM - HEALTH CARE FACILITY",
"GEN COMM - MIXED OFFICE/COMM",
"GEN COMM - NEIGHBORHOOD CTR",
"GEN COMM - OTHER",
"GEN COMM - REST/EATING FACILITY",
"GEN COMM - RETAIL/STRIP",
"GEN COMM - SMALL OFFICE",
"GEN COMM IMPR-LAND/NO SITE PLAN",
"GEN COMM IMPR-LAND/SITE PLAN",
"GEN COMM/PARKING",
"HOTEL - FULL SERVICE",
"HOTEL - LAND/OTHER",
"HOTEL - LIMITED SERVICE",
"HOTEL - LODGING",
"HOTEL - SELECT DRIVE",
"HOTEL RESIDENCE SUITES",
"MIXED USE",
"SFD - COMM ZONED/NO SITE PLAN",
"SFD - COMM ZONED/SITE PLAN") ~ "commercial",
countylandusedescription %in%
c("NOT VALUED CONDO HOA",
"SALES APPR CONDO/CO-OP",
"SALES APPR CONDO/GARDEN",
"SALES APPR CONDO/HIGH RISE",
"SALES APPR CONDO/MID RISE",
"SALES APPR CONDO/STACKED") ~ "condo",
countylandusedescription %in%
c("RESIDENTIAL COST-VAL - DUPLEX") ~ "duplex",
countylandusedescription %in%
c("OFFICE BLDG IMPR-LAND/SITE PLAN",
"OFFICE BLDG/7 OR MORE STORIES",
"OFFICE BLDG/PARKING",
"OFFICE BLDG/UNDER 7 STORIES") ~ "office",
countylandusedescription %in%
c("RESIDENTIAL COST-VAL - SIDE BY SIDE") ~ "sf attached",
countylandusedescription %in%
c("NOT VALUED COSTED - HOA/SITE PLAN",
"RESIDENTIAL COST-VAL - IMPR/SF & TW",
"RESIDENTIAL COST-VAL - SINGLE-FAM DET") ~ "sf detached",
countylandusedescription %in%
c("RESIDENTIAL COST-VAL - TOWNHOUSE/CO",
"RESIDENTIAL COST-VAL - TOWNHOUSE/FSO") ~ "townhouse",
countylandusedescription %in%
c("GEN COMM VAC-LAND/NO SITE PLAN",
"GEN COMM VAC-LAND/SITE PLAN",
"VACANT COMMERCIAL") ~ "vacant commercial",
countylandusedescription %in%
c("VACANT EXEMPT") ~ "Vacant exempt",
countylandusedescription %in%
c("VACANT LIGHT INDUSTRIAL") ~ "vacant light industrial",
countylandusedescription %in%
c("MULTI-FAM VACANT/NO SITE PLAN",
"MULTI-FAM VACANT/SITE PLAN") ~ "vacant mf",
countylandusedescription %in%
c("OFFICE BLDG VAC-LAND/NO SITE PLAN",
"OFFICE BLDG VAC-LAND/SITE PLAN",
"VACANT OFFICE") ~ "vacant office",
countylandusedescription %in%
c("VACANT RESIDENTIAL") ~ "vacant residential",
countylandusedescription %in%
c("RESIDENTIAL COST-VAL - VAC/SF & TW") ~ "vacant sf")
)
# identify properties with letters in address- remove for collapse
currentjur_cat2 <- currentjur_cat %>%
mutate(house_letter = ifelse(str_detect(prophouseno, "[:alpha:]") == 1, 1, 0),
oldadd = propaddress,
new_houseno = ifelse(house_letter == 1,
str_replace(prophouseno, "[:alpha:]", ""), prophouseno),
propaddress = ifelse(house_letter == 1,
paste(str_replace_all(new_houseno, "-", ""),
propstreetname,
propstreetsuffix,
sep = " "),
propaddress))
> nrow(filter(currentjur_cat, is.na(propaddress)))) {
print("no additional NAs")
}
# test to make sure we did not introduce any NAs
if (nrow(filter(currentjur_cat2, is.na(propaddress))) >
nrow(filter(currentjur_cat, is.na(propaddress)))) {
warning("additional NAs are introduced")
} else if (nrow(filter(currentjur_cat2, is.na(propaddress)))
< nrow(filter(currentjur_cat, is.na(propaddress)))) {
warning("less NAs than original")
} else if (nrow(filter(currentjur_cat2, is.na(propaddress)))
> nrow(filter(currentjur_cat, is.na(propaddress)))) {
print("no additional NAs")
}
# goal- one observation per property, based on street address
# functions for this section found in "Macros/collapse-properties.R"
nrow(filter(currentjur_cat, is.na(propaddress)))
nrow(filter(currentjur_cat2, is.na(propaddress)))
# identify properties with letters in address- remove for collapse
currentjur_cat2 <- currentjur_cat %>%
mutate(house_letter = ifelse(str_detect(prophouseno, "[:alpha:]") == 1, 1, 0),
oldadd = propaddress,
new_houseno = ifelse(house_letter == 1,
str_replace(prophouseno, "[:alpha:]", ""), prophouseno),
propaddress = ifelse(house_letter == 1,
paste(str_replace_all(new_houseno, "-", ""),
propstreetname,
propstreetsuffix,
sep = " ",
NA_character_),
propaddress))
# test to make sure we did not introduce any NAs
if (nrow(filter(currentjur_cat2, is.na(propaddress))) >
nrow(filter(currentjur_cat, is.na(propaddress)))) {
warning("additional NAs are introduced")
} else if (nrow(filter(currentjur_cat2, is.na(propaddress)))
< nrow(filter(currentjur_cat, is.na(propaddress)))) {
warning("less NAs than original")
} else if (nrow(filter(currentjur_cat2, is.na(propaddress)))
> nrow(filter(currentjur_cat, is.na(propaddress)))) {
print("no additional NAs")
}
> nrow(filter(currentjur_cat, is.na(propaddress)))) {
print("no additional NAs")
}
print("hi")
# test to make sure we did not introduce any NAs
if (nrow(filter(currentjur_cat2, is.na(propaddress))) >
nrow(filter(currentjur_cat, is.na(propaddress)))) {
warning("additional NAs are introduced")
} else if (nrow(filter(currentjur_cat2, is.na(propaddress))) <
nrow(filter(currentjur_cat, is.na(propaddress)))) {
warning("less NAs than original")
} else if (nrow(filter(currentjur_cat2, is.na(propaddress))) =
nrow(filter(currentjur_cat, is.na(propaddress)))) {
print("no additional NAs")
}
if (nrow(filter(currentjur_cat2, is.na(propaddress))) >
nrow(filter(currentjur_cat, is.na(propaddress)))) {
warning("additional NAs are introduced")
}
length(currentjur_cat, is.na(propaddress))
nrow(filter(currentjur_cat, is.na(prophouseno)))
# identify properties with letters in address- remove for collapse
currentjur_cat2 <- currentjur_cat %>%
mutate(house_letter = ifelse(str_detect(prophouseno, "[:alpha:]") == 1, 1, 0),
oldadd = propaddress,
new_houseno = ifelse(house_letter == 1,
str_replace(prophouseno, "[:alpha:]", ""), prophouseno),
new_houseno = ifelse(is.na(new_houseno), "", new_houseno),
propaddress = ifelse(house_letter == 1,
paste(str_replace_all(new_houseno, "-", ""),
propstreetname,
propstreetsuffix,
sep = " "),
propaddress))
nrow(filter(currentjur_cat2, is.na(propaddress)))
count(currentjur_cat2, is.na(new_houseno))
# identify properties with letters in address- remove for collapse
currentjur_cat2 <- currentjur_cat %>%
mutate(house_letter = ifelse(str_detect(prophouseno, "[:alpha:]") == 1, 1, 0),
oldadd = propaddress,
new_houseno = ifelse(house_letter == 1,
str_replace(prophouseno, "[:alpha:]", ""), prophouseno),
new_houseno = ifelse(is.na(new_houseno), "", new_houseno),
propaddress = ifelse(house_letter == 1,
paste(str_replace_all(new_houseno, "-", ""),
propstreetname,
propstreetsuffix,
sep = " "),
propaddress),
propaddress = ifelse(is.na(propaddress), oldadd, propaddress))
nrow(filter(currentjur_cat2, is.na(propaddress)))
# test to make sure we did not introduce any NAs
if (nrow(filter(currentjur_cat2, is.na(propaddress))) >
nrow(filter(currentjur_cat, is.na(propaddress)))) {
warning("additional NAs are introduced")
} else if (nrow(filter(currentjur_cat2, is.na(propaddress))) <
nrow(filter(currentjur_cat, is.na(propaddress)))) {
warning("less NAs than original")
} else if (nrow(filter(currentjur_cat2, is.na(propaddress))) =
nrow(filter(currentjur_cat, is.na(propaddress)))) {
print("no additional NAs")
}
# test to make sure we did not introduce any NAs
if (nrow(filter(currentjur_cat2, is.na(propaddress))) >
nrow(filter(currentjur_cat, is.na(propaddress)))) {
warning("additional NAs are introduced")
} else if (nrow(filter(currentjur_cat2, is.na(propaddress))) <
nrow(filter(currentjur_cat, is.na(propaddress)))) {
warning("less NAs than original")
} else if (nrow(filter(currentjur_cat2, is.na(propaddress))) ==
nrow(filter(currentjur_cat, is.na(propaddress)))) {
print("no additional NAs")
}
singles <- get_single_properties(currentjur_cat)
multiples <- get_multiple_properties(currentjur_cat)
missing_address <- get_missing_address(currentjur_cat)
check_classification(currentjur_cat)
multiples <- multiples %>%
group_by(propaddress) %>%
fill(zoning) %>%
fill(zoning, .direction = "up")
# check
mult_grouped <- multiples %>%
group_by(propaddress, zoning) %>%
count()
View(mult_grouped)
summarize_at()
?summarise_at
# take most common zoning variable, categorization
# sum building areas and
nested <- multiples %>%
group_by(propaddress) %>%
summarize(nprops = n()) %>%
summarise_at(vars(zoning, lotsizeorarea, lotsizesquarefeet,
buildingarea, countylandusedescription,
residential, category, category_detail,
yearbuilt, long, lat), list)
nested <- multiples %>%
group_by(propaddress) %>%
summarize(nprops = n())
View(nested)
# take most common zoning variable, categorization
# sum building areas and
nested <- multiples %>%
group_by(propaddress) %>%
summarise_at(vars(zoning, lotsizeorarea, lotsizesquarefeet,
buildingarea, countylandusedescription,
residential, category, category_detail,
yearbuilt, long, lat), list)
# take most common zoning variable, categorization
# sum building areas and
nested <- multiples %>%
group_by(propaddress) %>%
summarise_at(vars(zoning, lotsizeorarea, lotsizesquarefeet,
buildingarea, countylandusedescription,
residential, category, category_detail,
yearbuilt, long, lat), list) %>%
mutate(nprops = map(zoning, length))
View(nested)
# take most common zoning variable, categorization
# sum building areas and
nested <- multiples %>%
group_by(propaddress) %>%
summarise_at(vars(zoning, lotsizeorarea, lotsizesquarefeet,
buildingarea, countylandusedescription,
residential, category, category_detail,
yearbuilt, long, lat), list) %>%
mutate(nprops = map(zoning, length),
zoning2 = map(zoning, Mode),
lotsizeorarea2 = map(lotsizeorarea, sum),
buildingarea2 = map(buildingarea, sum),
countylandusedescription2 = map(countylandusedescription, Mode),
residential2 = map(residential, max),
category2 = map(category, Mode),
category_detail2 = map(category_detail, Mode),
yearbuilt2 = map(yearbuilt, max),
long2 = map(long, median),
lat2 = map(lat, median))
rename_at
?rename_at
# take most common zoning variable, categorization
# sum building areas and
nested <- multiples %>%
group_by(propaddress) %>%
summarise_at(vars(zoning, lotsizeorarea, lotsizesquarefeet,
buildingarea, countylandusedescription,
residential, category, category_detail,
yearbuilt, long, lat), list) %>%
rename_at(vars(-propaddress), ~ paste0(., "_list"))
# take most common zoning variable, categorization
# sum building areas and
nested <- multiples %>%
group_by(propaddress) %>%
summarise_at(vars(zoning, lotsizeorarea, lotsizesquarefeet,
buildingarea, countylandusedescription,
residential, category, category_detail,
yearbuilt, long, lat), list) %>%
rename_at(vars(-propaddress), ~ paste0(., "_list")) %>%
mutate(nprops = map(zoning_list, length),
zoning_list = map(zoning, Mode),
lotsizeorarea_list = map(lotsizeorarea, sum),
buildingarea_list = map(buildingarea, sum),
countylandusedescription_list = map(countylandusedescription, Mode),
residential_list = map(residential, max),
category_list = map(category, Mode),
category_detail_list = map(category_detail, Mode),
yearbuilt_list = map(yearbuilt, max),
long_list = map(long, median),
lat_list = map(lat, median))
# take most common zoning variable, categorization
# sum building areas and
nested <- multiples %>%
group_by(propaddress) %>%
summarise_at(vars(zoning, lotsizeorarea, lotsizesquarefeet,
buildingarea, countylandusedescription,
residential, category, category_detail,
yearbuilt, long, lat), list) %>%
rename_at(vars(-propaddress), ~ paste0(., "_list")) %>%
mutate(nprops = map(zoning_list, length),
zoning = map(zoning_list, Mode),
lotsizeorarea = map(lotsizeorarea_list, sum),
buildingarea = map(buildingarea_list, sum),
countylandusedescription = map(countylandusedescription_list, Mode),
residential = map(residential_list, max),
category = map(category_list, Mode),
category_detail = map(category_detail_list, Mode),
yearbuilt = map(yearbuilt_list, max),
long = map(long_list, median),
lat = map(lat_list, median))
View(nested)
ties <- multiples_vars %>%
mutate(ties_z = ifelse(map(zoning2, length) > 1, 1, 0)) %>%
filter(ties_z == 1)
ties <- nested %>%
mutate(ties_z = ifelse(map(zoning2, length) > 1, 1, 0)) %>%
filter(ties_z == 1) %>%
select(propaddress, zoning, nprops,
countylandusedescription, category, category_detail)
ties <- nested %>%
mutate(ties_z = ifelse(map(zoning, length) > 1, 1, 0)) %>%
filter(ties_z == 1) %>%
select(propaddress, zoning, nprops,
countylandusedescription, category, category_detail)
View(ties)
ties <- nested %>%
mutate(ties_z = ifelse(map(zoning, length) > 1, 1, 0)) %>%
filter(ties_z == 1) %>%
separate(zoning, into = c("zon1", "zon2", "zon3")) %>%
select(propaddress, zoning, nprops,
countylandusedescription, category, category_detail)
ties <- nested %>%
mutate(ties_z = ifelse(map(zoning, length) > 1, 1, 0))
ties <- nested %>%
mutate(ties_z = ifelse(map(zoning, length) > 1, 1, 0)) %>%
filter(ties_z == 1) %>%
separate(zoning, into = c("zon1", "zon2", "zon3"))
ties <- nested %>%
mutate(ties_z = ifelse(map(zoning, length) > 1, 1, 0)) %>%
filter(ties_z == 1) %>%
split(zoning, into = c("zon1", "zon2", "zon3"))
ties <- nested %>%
mutate(ties_z = ifelse(map(zoning, length) > 1, 1, 0)) %>%
filter(ties_z == 1) %>%
split(zoning)
ties <- nested %>%
mutate(ties_z = ifelse(map(zoning, length) > 1, 1, 0)) %>%
filter(ties_z == 1) %>%
unnest(zoning) %>%
select(propaddress, zoning, nprops,
countylandusedescription, category, category_detail)
ties <- nested %>%
mutate(ties_z = ifelse(map(zoning, length) > 1, 1, 0)) %>%
filter(ties_z == 1) %>%
unnest(zoning)
ties <- nested %>%
mutate(ties_z = ifelse(map(zoning, length) > 1, 1, 0)) %>%
filter(ties_z == 1) %>%
select(propaddress, zoning, nprops,
countylandusedescription, category, category_detail)
View(ties)
write_csv(ties,
paste0(filepath, "-zoning-ties.csv"))
ties <- nested %>%
mutate(ties_z = ifelse(map(zoning, length) > 1, 1, 0)) %>%
filter(ties_z == 1) %>%
select(propaddress, zoning, nprops,
countylandusedescription, category, category_detail) %>%
as.data.frame()
View(ties)
ties <- nested %>%
mutate(ties_z = ifelse(map(zoning, length) > 1, 1, 0)) %>%
filter(ties_z == 1) %>%
mutate(z1 = zoning[1])
ties <- nested %>%
mutate(ties_z = ifelse(map(zoning, length) > 1, 1, 0)) %>%
filter(ties_z == 1) %>%
mutate(z1 = map(zoning, [1]))
mutate(z1 = map(zoning, function(x) x[1])
ties <- nested %>%
mutate(ties_z = ifelse(map(zoning, length) > 1, 1, 0)) %>%
filter(ties_z == 1) %>%
mutate(z1 = map(zoning, function(x) x[1]))
ties <- nested %>%
mutate(ties_z = ifelse(map(zoning, length) > 1, 1, 0)) %>%
filter(ties_z == 1) %>%
mutate(z1 = map(zoning, function(x) x[1]))
View(ties)
ties <- nested %>%
mutate(ties_z = ifelse(map(zoning, length) > 1, 1, 0)) %>%
filter(ties_z == 1) %>%
mutate(z1 = map(zoning, function(x) x[1]),
z2 = map(zoning, function(x) x[2]),
z3 = map(zoning, function(x) x[3]))
cl1, cl2, cl3)
select(propaddress, nprops,
z1, z2, z3,
cl1, cl2, cl3)
ties <- nested %>%
mutate(ties_z = ifelse(map(zoning, length) > 1, 1, 0)) %>%
filter(ties_z == 1) %>%
mutate(z1 = map(zoning, function(x) x[1]),
z2 = map(zoning, function(x) x[2]),
z3 = map(zoning, function(x) x[3]),
cl1 = map(countylandusedescription, function(x) x[1]),
cl2 = map(countylandusedescription, function(x) x[2]),
cl3 = map(countylandusedescription, function(x) x[3])) %>%
select(propaddress, nprops,
z1, z2, z3,
cl1, cl2, cl3)
View(ties)
write_csv(ties,
paste0(filepath, "-zoning-ties.csv"))
View(ties)
ties <- nested %>%
mutate(ties_z = ifelse(map(zoning, length) > 1, 1, 0)) %>%
filter(ties_z == 1) %>%
mutate(z1 = map(zoning, function(x) x[1]),
z2 = map(zoning, function(x) x[2]),
z3 = map(zoning, function(x) x[3]),
cl1 = map(countylandusedescription, function(x) x[1]),
cl2 = map(countylandusedescription, function(x) x[2]),
cl3 = map(countylandusedescription, function(x) x[3])) %>%
select(propaddress, nprops,
z1, z2, z3,
cl1, cl2, cl3) %>%
unnest()
View(ties)
write_csv(ties,
paste0(filepath, "-zoning-ties.csv"))
write_csv(ties,
paste0("Data/", filepath, "-zoning-ties.csv"))
# test if there are condos that need to be re-labeled
singles %>% count(category)
# test if there are condos that need to be re-labeled
singles %>% count(category_detail)
multiples %>% count(category_detail)
multiples %>% count(category_detail)
# first- fill in missing zoning
multiples <- multiples %>%
group_by(propaddress) %>%
fill(zoning) %>%
fill(zoning, .direction = "up") %>%
ungroup()
multiples %>% count(category_detail)
View(multiples)
multiples %>% filter(category_detail == "sf detached")
msf <- multiples %>% filter(category_detail == "sf detached")
View(msf)
multiples <- get_multiple_properties(currentjur_cat)
check_classification(currentjur_cat)
# first- fill in missing zoning
multiples <- multiples %>%
group_by(propaddress) %>%
fill(zoning) %>%
fill(zoning, .direction = "up") %>%
ungroup()
# check
mult_grouped <- multiples %>%
group_by(propaddress) %>%
count()
View(mult_grouped)
# identify properties with letters in address- remove for collapse
currentjur_cat2 <- currentjur_cat %>%
mutate(house_letter = ifelse(str_detect(prophouseno, "[:alpha:]") == 1, 1, 0),
oldadd = propaddress,
new_houseno = ifelse(house_letter == 1,
str_replace(prophouseno, "[:alpha:]", ""), prophouseno),
propaddress = ifelse(house_letter == 1,
paste(str_replace_all(new_houseno, "-", ""),
propstreetname,
propstreetsuffix,
sep = " "),
propaddress),
propaddress = ifelse(is.na(propaddress), oldadd, propaddress))
# test to make sure we did not introduce any NAs
if (nrow(filter(currentjur_cat2, is.na(propaddress))) >
nrow(filter(currentjur_cat, is.na(propaddress)))) {
warning("additional NAs are introduced")
} else if (nrow(filter(currentjur_cat2, is.na(propaddress))) <
nrow(filter(currentjur_cat, is.na(propaddress)))) {
warning("less NAs than original")
} else if (nrow(filter(currentjur_cat2, is.na(propaddress))) ==
nrow(filter(currentjur_cat, is.na(propaddress)))) {
print("no additional NAs")
}
singles <- get_single_properties(currentjur_cat2)
multiples <- get_multiple_properties(currentjur_cat2)
missing_address <- get_missing_address(currentjur_cat2)
check_classification(currentjur_cat2)
multiples <- multiples %>%
group_by(propaddress) %>%
fill(zoning) %>%
fill(zoning, .direction = "up") %>%
ungroup()
multiples %>% count(category_detail)
msf <- multiples %>% filter(category_detail == "sf detached")
View(msf)
check <- multiples %>% group_by(propaddress) %>% count()
View(check)
a <- multiples %>% filter(propaddress == "1006 N QUINTANA ST")
View(a)
# test if there are condos that need to be re-labeled
singles %>% count(category_detail)
singles <- singles %>%
mutate(category = ifelse(category_detail == "condo",
"sf",
category),
category_detail = ifelse(category_detail == "condo",
"sf attached",
category_detail))
# test if there are condos that need to be re-labeled
singles %>% count(category_detail)
dup <- singles %>% filter(category_detail == "duplex")
View(dup)
