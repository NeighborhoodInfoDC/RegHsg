"",
"",
"case-by-case basis",
"residential",
"case-by-case basis",
"case-by-case basis",
"case-by-case basis",
"take maxiumum year- accounts for renovation",
"median longitude and latitude ensures this is a correct pairing, falls within the address",
"median longitude and latitude ensures this is a correct pairing, falls within the address"))
knitr::kable(v)
rm(v)
nested <- multiples %>%
group_by(propaddress, parcel_address) %>%
summarize_at(vars(zoning, lotsize_sf,
buildingarea, countylandusedescription,
residential, category, category_detail, building_type,
yearbuilt, long, lat), list) %>%
rename_at(vars(-propaddress, -parcel_address), ~ paste0(., "_list")) %>%
mutate(nprops = map(zoning_list, length),
zoning = map(zoning_list, Mode),
lotsize_sf_sum = map_dbl(lotsize_sf_list, sum, na.rm = TRUE),
buildingarea = map_dbl(buildingarea_list, sum, na.rm = TRUE),
countylandusedescription = map(countylandusedescription_list, Mode),
residential = map(residential_list, max, na.rm = FALSE),
category = map(category_list, Mode),
category_detail = map(category_detail_list, Mode),
building_type = ifelse(category == "MF",
map(building_type_list, Mode),
NA),
long = map(long_list, median),
lat = map(lat_list, median),
# year built handled differently due to missing values
yearbuilt_list = ifelse(as.integer(map(yearbuilt_list, function(x) sum(!is.na(x)))) == 0,
NA,
yearbuilt_list),
yearbuilt = ifelse(!is.na(yearbuilt_list),
map(yearbuilt_list, max, na.rm = TRUE),
NA))
nested <- nested %>%
mutate(nprops = as.integer(nprops),
lotsiz_sf_sum = as.integer(lotsize_sf_sum),
unique_lots = map(lotsize_sf_list, function(x) length(unique(x))),
lsfirst = map(lotsize_sf_list, function(x) x[1]),
lsmode = ifelse(lotsize_sf_sum == 0,
NA,
map(lotsize_sf_list, Mode, na.rm = TRUE))
) %>%
ungroup()
nested <- nested %>%
mutate(fxn = case_when(
lotsize_sf_sum < 1 ~ "missing",
nprops == unique_lots ~ "sum",
unique_lots == 1 ~ "first",
TRUE ~ "other"
))
nested %>% count(fxn)
nested_done <- nested %>%
filter(fxn != "other")
nested_all <- bind_rows(nested_done, nested_other) %>%
mutate_at(vars(lotsize_sf_sum, lsfirst, lsmode_num), as.double) %>%
mutate(lotsize_sf_final =
case_when(fxn == "first" ~ lsfirst,
fxn == "sum" ~ lotsize_sf_sum,
fxn == "other" ~ lotsize_sf_sum,
fxn == "mode" ~ lsmode_num))
nested_other <- nested %>%
filter(fxn == "other") %>%
mutate(lsmode_num = ifelse(map(lsmode, length) > 1, NA, lsmode),
lsmode_num = as.integer(lsmode_num),
fxn = case_when(
nprops > 500 ~ "missing",
lsmode_num > 8000 ~ "mode",
TRUE ~ "sum"
))
count(nested_other, fxn)
nested_all <- bind_rows(nested_done, nested_other) %>%
mutate_at(vars(lotsize_sf_sum, lsfirst, lsmode_num), as.double) %>%
mutate(lotsize_sf_final =
case_when(fxn == "first" ~ lsfirst,
fxn == "sum" ~ lotsize_sf_sum,
fxn == "other" ~ lotsize_sf_sum,
fxn == "mode" ~ lsmode_num))
count(nested_all, fxn == "missing")
count(nested_all, is.na(lotsize_sf_final))
nested <- nested %>%
mutate(nprops = as.integer(nprops),
lotsiz_sf_sum = as.integer(lotsize_sf_sum),
unique_lots = map(lotsize_sf_list, function(x) length(unique(x))),
lsfirst = map(lotsize_sf_list, function(x) x[1]),
lsmode = ifelse(lotsize_sf_sum == 0,
NA,
map(lotsize_sf_list, Mode, na.rm = TRUE))
) %>%
ungroup()
nested <- multiples %>%
group_by(propaddress, parcel_address) %>%
summarize_at(vars(zoning, lotsize_sf,
buildingarea, countylandusedescription,
residential, category, category_detail, building_type,
yearbuilt, long, lat), list) %>%
rename_at(vars(-propaddress, -parcel_address), ~ paste0(., "_list")) %>%
mutate(nprops = map(zoning_list, length),
zoning = map(zoning_list, Mode),
lotsize_sf_sum = map_dbl(lotsize_sf_list, sum, na.rm = TRUE),
buildingarea = map_dbl(buildingarea_list, sum, na.rm = TRUE),
countylandusedescription = map(countylandusedescription_list, Mode),
residential = map(residential_list, max, na.rm = FALSE),
category = map(category_list, Mode),
category_detail = map(category_detail_list, Mode),
building_type = ifelse(category == "MF",
map(building_type_list, Mode),
NA),
long = map(long_list, median),
lat = map(lat_list, median),
# year built handled differently due to missing values
yearbuilt_list = ifelse(as.integer(map(yearbuilt_list, function(x) sum(!is.na(x)))) == 0,
NA,
yearbuilt_list),
yearbuilt = ifelse(!is.na(yearbuilt_list),
map(yearbuilt_list, max, na.rm = TRUE),
NA))
nested <- nested %>%
mutate(nprops = as.integer(nprops),
lotsiz_sf_sum = as.integer(lotsize_sf_sum),
unique_lots = map(lotsize_sf_list, function(x) length(unique(x))),
lsfirst = map(lotsize_sf_list, function(x) x[1]),
lsmode = ifelse(lotsize_sf_sum == 0,
NA,
map(lotsize_sf_list, Mode, na.rm = TRUE))
) %>%
ungroup()
nested <- nested %>%
mutate(fxn = case_when(
lotsize_sf_sum < 1 ~ "missing",
nprops == unique_lots ~ "sum",
unique_lots == 1 ~ "first",
TRUE ~ "other"
))
nested %>% count(fxn)
nested_done <- nested %>%
filter(fxn != "other")
nested_other <- nested %>%
filter(fxn == "other") %>%
mutate(lsmode_num = ifelse(map(lsmode, length) > 1, NA, lsmode),
lsmode_num = as.integer(lsmode_num),
fxn = case_when(
nprops > 500 ~ "missing",
lsmode_num > 8000 ~ "mode",
TRUE ~ "sum"
))
count(nested_other, fxn)
nested_all <- bind_rows(nested_done, nested_other) %>%
mutate_at(vars(lotsize_sf_sum, lsfirst, lsmode_num), as.double) %>%
mutate(lotsize_sf_final =
case_when(fxn == "first" ~ lsfirst,
fxn == "sum" ~ lotsize_sf_sum,
fxn == "other" ~ lotsize_sf_sum,
fxn == "mode" ~ lsmode_num))
count(nested_all, fxn == "missing")
count(nested_all, is.na(lotsize_sf_final))
nested_other <- nested %>%
filter(fxn == "other") %>%
mutate(lsmode_num = ifelse(map(lsmode, length) > 1, NA, lsmode),
lsmode_num = as.integer(lsmode_num),
fxn = case_when(
nprops > 500 ~ "missing",
lsmode_num > 8000 ~ "mode",
TRUE ~ "sum"
))
count(nested_other, fxn)
nested_all <- bind_rows(nested_done, nested_other) %>%
mutate_at(vars(lotsize_sf_sum, lsfirst, lsmode_num), as.double) %>%
mutate(lotsize_sf_final =
case_when(fxn == "first" ~ lsfirst,
fxn == "sum" ~ lotsize_sf_sum,
fxn == "other" ~ lotsize_sf_sum,
fxn == "mode" ~ lsmode_num))
count(nested_all, fxn == "missing")
count(nested_all, is.na(lotsize_sf_final))
stopifnot(nrow(nested_all) == nrow(nested))
rm(nested, nested_done, nested_other)
count(nested_all, fxn == "missing")
count(nested_all, is.na(lotsize_sf_final))
count(nested_all, fxn == "missing")
count(nested_all, is.na(lotsize_sf_final))
stopifnot(nrow(nested_all) == nrow(nested))
nested <- nested %>%
mutate(fxn = case_when(
lotsize_sf_sum < 1 ~ "missing",
nprops == unique_lots ~ "sum",
unique_lots == 1 ~ "first",
TRUE ~ "other"
))
nested <- nested %>%
mutate(nprops = as.integer(nprops),
lotsiz_sf_sum = as.integer(lotsize_sf_sum),
unique_lots = map(lotsize_sf_list, function(x) length(unique(x))),
lsfirst = map(lotsize_sf_list, function(x) x[1]),
lsmode = ifelse(lotsize_sf_sum == 0,
NA,
map(lotsize_sf_list, Mode, na.rm = TRUE))
) %>%
ungroup()
nested <- multiples %>%
group_by(propaddress, parcel_address) %>%
summarize_at(vars(zoning, lotsize_sf,
buildingarea, countylandusedescription,
residential, category, category_detail, building_type,
yearbuilt, long, lat), list) %>%
rename_at(vars(-propaddress, -parcel_address), ~ paste0(., "_list")) %>%
mutate(nprops = map(zoning_list, length),
zoning = map(zoning_list, Mode),
lotsize_sf_sum = map_dbl(lotsize_sf_list, sum, na.rm = TRUE),
buildingarea = map_dbl(buildingarea_list, sum, na.rm = TRUE),
countylandusedescription = map(countylandusedescription_list, Mode),
residential = map(residential_list, max, na.rm = FALSE),
category = map(category_list, Mode),
category_detail = map(category_detail_list, Mode),
building_type = ifelse(category == "MF",
map(building_type_list, Mode),
NA),
long = map(long_list, median),
lat = map(lat_list, median),
# year built handled differently due to missing values
yearbuilt_list = ifelse(as.integer(map(yearbuilt_list, function(x) sum(!is.na(x)))) == 0,
NA,
yearbuilt_list),
yearbuilt = ifelse(!is.na(yearbuilt_list),
map(yearbuilt_list, max, na.rm = TRUE),
NA))
nested <- nested %>%
mutate(nprops = as.integer(nprops),
lotsiz_sf_sum = as.integer(lotsize_sf_sum),
unique_lots = map(lotsize_sf_list, function(x) length(unique(x))),
lsfirst = map(lotsize_sf_list, function(x) x[1]),
lsmode = ifelse(lotsize_sf_sum == 0,
NA,
map(lotsize_sf_list, Mode, na.rm = TRUE))
) %>%
ungroup()
nested <- nested %>%
mutate(fxn = case_when(
lotsize_sf_sum < 1 ~ "missing",
nprops == unique_lots ~ "sum",
unique_lots == 1 ~ "first",
TRUE ~ "other"
))
nested %>% count(fxn)
nested_done <- nested %>%
filter(fxn != "other")
nested_other <- nested %>%
filter(fxn == "other") %>%
mutate(lsmode_num = ifelse(map(lsmode, length) > 1, NA, lsmode),
lsmode_num = as.integer(lsmode_num),
fxn = case_when(
nprops > 500 ~ "missing",
lsmode_num > 8000 ~ "mode",
TRUE ~ "sum"
))
count(nested_other, fxn)
nested_all <- bind_rows(nested_done, nested_other) %>%
mutate_at(vars(lotsize_sf_sum, lsfirst, lsmode_num), as.double) %>%
mutate(lotsize_sf_final =
case_when(fxn == "first" ~ lsfirst,
fxn == "sum" ~ lotsize_sf_sum,
fxn == "other" ~ lotsize_sf_sum,
fxn == "mode" ~ lsmode_num))
count(nested_all, fxn == "missing")
count(nested_all, is.na(lotsize_sf_final))
count(nested_all, fxn == "missing")
count(nested_all, is.na(lotsize_sf_final))
stopifnot(nrow(nested_all) == nrow(nested))
stopifnot(nrow(nested_all) == nrow(nested))
rm(nested, nested_done, nested_other)
ties <- nested_all %>%
mutate(ties_z = ifelse(map(zoning, length) > 1, 1, 0)) %>%
filter(ties_z == 1) %>%
mutate(z1 = map(zoning, 1),
z2 = map(zoning, 2),
z3 = map(zoning, 3),
cl1 = map(countylandusedescription, 1),
cl2 = map(countylandusedescription, 2),
cl3 = map(countylandusedescription, 3)) %>%
select(propaddress, nprops,
z1, z2, z3,
cl1, cl2, cl3) %>%
mutate_all(as.character)
ties %>%
select(propaddress, z1, z2) %>%
head(5)
nested_all <- nested_all %>%
mutate(ties_z = ifelse(map(zoning, length) > 1, 1, 0)) %>%
mutate(zoning = ifelse(ties_z == 1,
NA,
zoning),
countylandusedescription = ifelse(ties_z == 1,
NA,
countylandusedescription)) %>%
select(-ties_z)
cdties <- nested_all %>%
filter(map(category_detail, length) > 1)
cdties %>%
mutate(category_detail_chr = as.character(category_detail)) %>%
group_by(category_detail_chr) %>%
count() %>%
arrange(desc(n))
cdties <- nested_all %>%
filter(map(category_detail, length) > 1)
cdties %>%
mutate(category_detail_chr = as.character(category_detail)) %>%
group_by(category_detail_chr) %>%
count() %>%
arrange(desc(n))
View(propaddress)
View(ties)
nested_all <- nested_all %>%
mutate(ties_z = ifelse(map(zoning, length) > 1, 1, 0)) %>%
mutate(zoning = ifelse(ties_z == 1,
NA,
zoning),
countylandusedescription = ifelse(ties_z == 1,
NA,
countylandusedescription)) %>%
select(-ties_z)
cdties <- nested_all %>%
filter(map(category_detail, length) > 1)
cdties %>%
mutate(category_detail_chr = as.character(category_detail)) %>%
group_by(category_detail_chr) %>%
count() %>%
arrange(desc(n))
cdties <- cdties %>%
mutate(test_vacant = as.integer(map(category_detail,
~ sum(str_detect(., "vacant")))))
count(cdties, test_vacant) %>%
rename(`Number of vacant categories` = test_vacant,
`Number of instances` = n) %>%
mutate(`What to do?` = c("Take the residential code",
"Take the non-vacant categoty",
"Pick the more general vacant category")) %>%
knitr::kable()
count(cdties, test_vacant) %>%
rename(`Number of vacant categories` = test_vacant,
`Number of instances` = n) %>%
mutate(`What to do?` = c("Take the residential code",
"Take the non-vacant categoty",
"Pick the more general vacant category")) %>%
knitr::kable()
count(cdties, test_vacant) %>%
rename(`Number of vacant categories` = test_vacant,
`Number of instances` = n) %>%
count(cdties, test_vacant) %>%
rename(`Number of vacant categories` = test_vacant,
`Number of instances` = n) %>%
mutate(`What to do?` = c("Take the residential code",
"Take the non-vacant categoty",
"Pick the more general vacant category")) %>%
knitr::kable()
count(cdties, test_vacant) %>%
rename(`Number of vacant categories` = test_vacant,
`Number of instances` = n) %>%
view(cdties)
mutate(`What to do?` = c("Take the residential code",
"Take the non-vacant categoty",
"Pick the more general vacant category")) %>%
count(cdties, test_vacant) %>%
rename(`Number of vacant categories` = test_vacant,
`Number of instances` = n) %>%
mutate(`What to do?` = c("Take the residential code",
"Take the non-vacant categoty",
"Pick the more general vacant category")) %>%
knitr::kable()
cdties <- cdties %>%
mutate(test_vacant = as.integer(map(category_detail,
~ sum(str_detect(., "vacant")))))
cdties <- cdties %>%
mutate(test_vacant = as.integer(map(category_detail,
~ sum(str_detect(., "vacant")))))
count(cdties, test_vacant) %>%
rename(`Number of vacant categories` = test_vacant,
`Number of instances` = n) %>%
mutate(`What to do?` = c("Take the residential code",
"Take the non-vacant categoty",
"Pick the more general vacant category")) %>%
knitr::kable()
cdties <- cdties %>%
mutate(test_vacant = as.integer(map(category_detail,
~ sum(str_detect(., "vacant")))))
count(cdties, test_vacant) %>%
rename(`Number of vacant categories` = test_vacant,
`Number of instances` = n) %>%
mutate(`What to do?` = c("Take the residential code",
"Take the non-vacant categoty",
"Pick the more general vacant category")) %>%
knitr::kable()
cdties <- cdties %>%
mutate(test_vacant = as.integer(map(category_detail,
~ sum(str_detect(., "vacant")))))
count(cdties, test_vacant) %>%
rename(`Number of vacant categories` = test_vacant,
`Number of instances` = n) %>%
mutate(`What to do?` = c("Take the residential code",
"Take the non-vacant categoty")) %>%
knitr::kable()
novac <- cdties %>%
filter(test_vacant == 0) %>%
mutate(test_res1 = map(residential_list, 1),
test_res2 = map(residential_list, 2)) %>%
mutate(argnum = case_when(test_res1 == 1 ~ 1,
test_res2 == 1 ~ 2,
TRUE ~ 1)) %>%
mutate(category = ifelse(argnum == 1,
map(category_list, 1),
map(category_list, 2)),
category_detail = ifelse(argnum == 1,
map(category_detail_list, 1),
map(category_detail_list, 2)),
building_type = ifelse(argnum == 1,
map(building_type_list, 1),
map(building_type_list, 2)),
countylandusedescription = ifelse(argnum == 1,
map(countylandusedescription_list, 1),
map(countylandusedescription_list, 2))) %>%
select(-test_res1, -test_res2, -argnum)
onevac <- cdties %>%
filter(test_vacant == 1) %>%
mutate(vac1 = str_detect(map(category_detail_list, 1), "vacant")) %>%
mutate(category = ifelse(vac1 == FALSE,
map(category_list, 1),
map(category_list, 2)),
category_detail = ifelse(vac1 == FALSE,
map(category_detail_list, 1),
map(category_detail_list, 2)),
building_type = ifelse(vac1 == FALSE,
map(building_type_list, 1),
map(building_type_list, 2)),
countylandusedescription = ifelse(vac1 == FALSE,
map(countylandusedescription_list, 1),
map(countylandusedescription_list, 2))) %>%
mutate(nprops = 1,
vacant_flag = 1) %>%
select(-vac1)
# this value will be used later to check the number of rows
nunits <- cdties %>% filter(test_vacant == 1) %>% summarize(sum(nprops)) %>% pull()
bothvac <- cdties %>%
filter(test_vacant == 2) %>%
mutate(countylandusedescription = map(countylandusedescription, 1),
category_detail = map(category_detail, 1))
stopifnot(
nrow(cdties) == nrow(bind_rows(novac, bothvac, onevac))
)
nested_final <- bind_rows(
filter(nested_all, map(category_detail, length) <= 1),
novac, bothvac, onevac) %>%
select(-test_vacant)
stopifnot(nrow(nested_all) == nrow(nested_final))
rm(novac, onevac, bothvac, nested_all)
count(singles, category_detail)
singles <- singles %>%
mutate(category = ifelse(category_detail == "condo",
"sf",
category),
category_detail = ifelse(category_detail == "condo",
"sf attached",
category_detail))
View(singles)
View(singles)
singles_f <- singles %>%
select(county_fips, county_name,
assessorsparcelnumberapnpin,
propaddress, propcity, propstate, propzip,
propunitno, prophouseno, propstreetname, propstreetsuffix,
lat, long, tract, owneroccupiedresidential,
countylandusedescription, zoning, buildingarea, noofbuildings,
noofstories, numberofunits, yearbuilt,
lotsize_acres, lotsize_sf, address_type,
category, category_detail, residential, building_type)
missing_f <- missing %>%
select(county_fips, county_name,
assessorsparcelnumberapnpin,
propaddress, propcity, propstate, propzip,
propunitno, prophouseno, propstreetname, propstreetsuffix,
lat, long, tract, owneroccupiedresidential,
countylandusedescription, zoning, buildingarea, noofbuildings,
noofstories, numberofunits, yearbuilt,
lotsize_acres, lotsize_sf, address_type,
category, category_detail, residential, building_type)
multiples_f <- nested_final %>%
select(-ends_with("_list"), -lsmode, -lsfirst,
-lsmode_num, -fxn, -unique_lots, -lotsize_sf_sum) %>%
mutate_at(vars(countylandusedescription, zoning,
category, category_detail, building_type, yearbuilt),
as.character) %>%
mutate_at(vars(buildingarea, lat, long, residential), as.double) %>%
rename(lotsize_sf = lotsize_sf_final, numberofunits = nprops) %>%
mutate(lotsize_acres = lotsize_sf / 43560,
address_type = "multiple")
finaljur <- bind_rows(singles_f, multiples_f, missing_f) %>%
fill(county_fips) %>%
fill(county_name)
mult <- finaljur %>%
filter(address_type == "multiple") %>%
summarize(num = sum(numberofunits)) %>%
pull()
other <- finaljur %>%
filter(address_type != "multiple")
stopifnot(mult + nrow(other) == nrow(jur) -
(nunits - nrow(filter(cdties, test_vacant == 1))))
rm(mult, other, nunits, cdties)
write_csv(finaljur,
paste0("../Data/", filepath, "-cleaned-data.csv"))
