<<<<<<< master
missing_zoning <- vacant %>%
filter(is.na(zoning_code))
missing_zoning %>%
summarize(missing_addreess = sum(is.na(propaddress)),
zoning_tie = sum(str_detect(zoning, "/") == TRUE, na.rm = TRUE))
missing_zoning %>%
summarize(missing_address = sum(is.na(propaddress)),
zoning_tie = sum(str_detect(zoning, "/") == TRUE, na.rm = TRUE))
View(missing_zoning)
library(tidyverse)
source("../Macros/read-jurisdiction.R")
if (!dir.exists("../Data")) {
dir.create("../Data")
}
currentfips <- "51013"
filepath <- "arlington"
if (!exists("jur")) {
jur <- read_jurisdiction(filepath)
} else {
warning(filepath, " data already read in")
}
vacant <- jur %>%
filter(category == "vacant")
vacant %>%
group_by(category_detail) %>%
summarize_at(vars(propaddress, lotsize_sf, zoning),
~ sum(is.na(.))) %>%
mutate_at(vars(propaddress, lotsize_sf, zoning),
.funs = funs(percent = scales::percent(. / nrow(vacant)))) %>%
knitr::kable(caption = "Number and percent of missing values")
library(tidyverse)
source("../Macros/read-jurisdiction.R")
zoningfile <- paste0("L:/Libraries/RegHsg/Maps/",
filepath,
"-zoning-map.kml")
if (!file.exists(zoningfile)) {
download.file("https://data.arlingtonva.us/dataviews/226297/zoning-boundary/",
zoningfile)
}
if (!file.exists(zoningfile)) {
download.file("http://gisdata-arlgis.opendata.arcgis.com/datasets/1ec04543da0546d38b63d8fd8e1019d5_11.kml",
zoningfile)
}
?download.file
if (!file.exists(zoningfile)) {
download.file("http://gisdata-arlgis.opendata.arcgis.com/datasets/1ec04543da0546d38b63d8fd8e1019d5_11.kml",
destfile = zoningfile)
}
download.file("http://gisdata-arlgis.opendata.arcgis.com/datasets/1ec04543da0546d38b63d8fd8e1019d5_11.kml",
destfile = zoningfile)
if (!file.exists(zoningfile)) {
download.file(zurl,
destfile = zoningfile)
}
library(sf)
zon <- read_sf(zoningfile)
View(zon)
zon <- st_read(zoningfile)
View(zon)
zurl <- "https://opendata.arcgis.com/datasets/28efb25252b54f1180b703fbcdd2209b_0.kml?outSR=%7B%22wkid%22%3A102746%2C%22latestWkid%22%3A2283%7D"
download.file(zurl,
destfile = zoningfile)
zurl <- "https://gisdata-arlgis.opendata.arcgis.com/datasets/28efb25252b54f1180b703fbcdd2209b_0"
if (!file.exists(zoningfile)) {
download.file(zurl,
destfile = zoningfile)
}
zon <- st_read(zoningfile)
zon <- read_sf(zoningfile)
zurl <- "https://opendata.arcgis.com/datasets/28efb25252b54f1180b703fbcdd2209b_0.kml?outSR=%7B%22wkid%22%3A102746%2C%22latestWkid%22%3A2283%7D"
download.file(zurl,
destfile = zoningfile)
zurl <- "https://opendata.arcgis.com/datasets/28efb25252b54f1180b703fbcdd2209b_0.zip?outSR=%7B%22wkid%22%3A102746%2C%22latestWkid%22%3A2283%7D"
zoningfile <- paste0("L:/Libraries/RegHsg/Maps/",
filepath,
"-zoning-map.zip")
if (!file.exists(zoningfile)) {
download.file(zurl,
destfile = zoningfile)
}
unzip(zoningfile, exdir = "L:/Libraries/RegHsg/Maps/")
unzip(zoningfile, exdir = "L:/Libraries/RegHsg/Maps")
zurl <- "https://gisdata-arlgis.opendata.arcgis.com/datasets/28efb25252b54f1180b703fbcdd2209b_0"
if (!file.exists(zoningfile)) {
download.file(zurl,
destfile = zoningfile)
}
zurl <- "https://opendata.arcgis.com/datasets/28efb25252b54f1180b703fbcdd2209b_0.kml?outSR=%7B%22wkid%22%3A102746%2C%22latestWkid%22%3A2283%7D"
zoningfile <- paste0("L:/Libraries/RegHsg/Maps/",
filepath,
"-zoning-map.kml")
if (!file.exists(zoningfile)) {
download.file(zurl,
destfile = zoningfile)
}
zon <- read_sf(zoningfile)
View(zon)
ggplot(zon) +
geom_sf(mapping = aes())
zurl <- "https://gisdata-arlgis.opendata.arcgis.com/datasets/28efb25252b54f1180b703fbcdd2209b_0"
zzip <- paste0("L:/Libraries/RegHsg/Maps/",
filepath,
"-zoning-map.zip")
if (!file.exists(zoningfile)) {
download.file(zzip,
destfile = zoningfile)
}
download.file(zurl,
destfile = zoningfile)
if (!file.exists(zzip)) {
download.file(zurl,
destfile = zoningfile)
}
if (!file.exists(zzip)) {
download.file(zurl,
destfile = zzip)
}
zdir <- paste0("L:/Libraries/RegHsg/Maps/",
filepath,
"-zoning-map")
dir.create(zdir)
unzip(zzip, exdir = zdir)
?unzip
dir.create(zdir)
unzip(zzip, exdir = zdir)
unzip(zzip, exdir = zdir)
list.files(zdir)
list.files(zdir)[1]
str_sub(list.files(zdir), 1, str_length(list.files(zdir)) - 4)
zfile <- str_sub(list.files(zdir), 1, str_length(list.files(zdir)) - 4) %>% unique()
zon <- read_sf(dsn = zdir,
layer = zfile)
View(zon)
ggplot(zon) +
geom_sf(mapping = aes(fill = ZN_DESIG))
zfile <- str_sub(list.files(zdir), end = -4) %>% unique()
zfile <- str_sub(list.files(zdir), end = -5) %>% unique()
ggplot(zon) +
geom_sf(mapping = aes(fill = ZN_DESIG))
source("../Macros/read-jurisdiction.R")
source("../Macros/read-jurisdiction.R")
source("../Macros/read-jurisdiction.R")
source("../Macros/read-jurisdiction.R")
library(tidyverse)
library(sf)
source("../Macros/read-jurisdiction.R")
rm(zurl, zzip, zfile, zdir)
rm(zoningfile)
View(read_jurisdiction)
vacant <- jur %>%
filter(category == "vacant")
vacantsf <- st_as_sf(vacant, coords = c("long", "lat"))
vacant <- jur %>%
filter(category == "vacant") %>%
filter(!is.na(long), !is.na(lat))
vacantsf <- st_as_sf(vacant, coords = c("long", "lat"))
vacantsf <- vacant %>%
filter(!is.na(long), !is.na(lat)) %>%
st_as_sf(coords = c("long", "lat"))
View(vacantsf)
ggplot() +
geom_sf(data = zon, mapping = aes(),
fill = "grey", color = NA) +
geom_sf(data = vacantsf, mapping = aes())
st_crs(zon)
st_crs(vacantsf) <- st_crs(zon)
ggplot() +
geom_sf(data = zon, mapping = aes(),
fill = "grey", color = NA) +
geom_sf(data = vacantsf, mapping = aes())
ggplot() +
geom_sf(data = zon, mapping = aes(),
fill = "grey", color = NA)
vacantsf <- vacant %>%
filter(!is.na(long), !is.na(lat)) %>%
st_as_sf(coords = c("long", "lat"), crs = st_crs(zon))
ggplot() +
geom_sf(data = zon, mapping = aes(),
fill = "grey", color = NA) +
geom_sf(data = vacantsf, mapping = aes())
View(vacantsf)
ggplot() +
# geom_sf(data = zon, mapping = aes(),
#         fill = "grey", color = NA) +
geom_sf(data = vacantsf, mapping = aes())
ggplot(zon) +
geom_sf(mapping = aes(fill = ZN_DESIG))
vacantsf <- vacant %>%
filter(!is.na(long), !is.na(lat)) %>%
st_as_sf(coords = c("long", "lat"))
ggplot() +
# geom_sf(data = zon, mapping = aes(),
#         fill = "grey", color = NA) +
geom_sf(data = vacantsf, mapping = aes())
st_crs(zon)
st_crs(vacantsf)
st_crs(vacantsf) <- st_crs(zon)
st_crs(vacantsf)
st_crs(vacantsf) <- 4326
st_crs(zon) <- 4326
ggplot() +
geom_sf(data = zon, mapping = aes(),
fill = "grey", color = NA) +
geom_sf(data = vacantsf, mapping = aes())
st_crs(vacantsf)
st_crs(zon)
st_crs(vacantsf) <- 6487
st_crs(zon) <- 6487
ggplot() +
geom_sf(data = zon, mapping = aes(),
fill = "grey", color = NA) +
geom_sf(data = vacantsf, mapping = aes())
zon <- read_sf(dsn = zdir,
layer = zfile)
zzip <- paste0("L:/Libraries/RegHsg/Maps/",
filepath,
"-zoning-map.zip")
zdir <- paste0("L:/Libraries/RegHsg/Maps/",
filepath,
"-zoning-map")
zurl <- "https://gisdata-arlgis.opendata.arcgis.com/datasets/28efb25252b54f1180b703fbcdd2209b_0"
if (!file.exists(zzip)) {
download.file(zurl,
destfile = zzip)
dir.create(zdir)
unzip(zzip, exdir = zdir)
}
zfile <- str_sub(list.files(zdir), end = -5) %>% unique()
zon <- read_sf(dsn = zdir,
layer = zfile)
vacant <- jur %>%
filter(category == "vacant") %>%
filter(!is.na(long), !is.na(lat))
vacantsf <- vacant %>%
filter(!is.na(long), !is.na(lat)) %>%
st_as_sf(coords = c("long", "lat"))
ggplot() +
geom_sf(data = zon, mapping = aes(),
fill = "grey", color = NA) +
geom_sf(data = vacantsf, mapping = aes())
ggplot() +
geom_sf(data = zon, mapping = aes(),
fill = "grey", color = NA) +
geom_point(data = vacant, mapping = aes(long, lat))
View(vacant)
View(zon)
ggplot(zon) +
geom_sf(mapping = aes(fill = ZN_DESIG))
?st_transform
st_transform(vacantsf, crs = st_crs(zon))
st_crs(zon)
st_transform(vacantsf, crs = st_crs(zon))
vacantsf <- st_transform(vacantsf, crs = st_crs(zon))
vacantsf <- st_transform(vacantsf, crs = 6487)
st_crs(vacantsf) <- 6487
vacantsf <- st_transform(vacantsf, crs = st_crs(zon))
ggplot() +
geom_sf(data = zon, mapping = aes(),
fill = "grey", color = NA) +
geom_point(data = vacant, mapping = aes(long, lat))
vacant <- jur %>%
filter(category == "vacant") %>%
filter(!is.na(long), !is.na(lat))
vacantsf <- vacant %>%
filter(!is.na(long), !is.na(lat)) %>%
st_as_sf(coords = c("long", "lat"))
ggplot() +
geom_sf(data = zon, mapping = aes(),
fill = "grey", color = NA) +
geom_point(data = vacant, mapping = aes(long, lat))
st_geometry(zon)
vacantsf <- vacant %>%
filter(!is.na(long), !is.na(lat)) %>%
st_as_sf(coords = c("long", "lat")) %>%
st_set_crs(st_crs(zon))
ggplot() +
geom_sf(data = zon, mapping = aes(),
fill = "grey", color = NA) +
geom_point(data = vacant, mapping = aes(long, lat))
ggplot() +
geom_sf(data = zon, mapping = aes(),
fill = "grey", color = NA)
ggplot() +
#geom_sf(data = zon, mapping = aes(),
#        fill = "grey", color = NA) +
geom_point(data = vacant, mapping = aes(long, lat))
ggplot() +
geom_sf(data = zon, mapping = aes(),
fill = "grey", color = NA) +
geom_point(data = vacant, mapping = aes(long, lat))
ggplot() +
geom_sf(data = zon, mapping = aes(),
fill = "grey", color = NA) +
geom_sf(data = vacantsf, mapping = aes())
View(vacantsf)
ggplot() +
#geom_sf(data = zon, mapping = aes(),
#        fill = "grey", color = NA) +
geom_sf(data = vacantsf, mapping = aes())
ggplot() +
#geom_sf(data = zon, mapping = aes(),
#        fill = "grey", color = NA) +
geom_sf(data = vacantsf, mapping = aes(),
crs = st_crs(zon))
vacantsf <- vacant %>%
filter(!is.na(long), !is.na(lat)) %>%
st_as_sf(coords = c("long", "lat"))
ggplot() +
#geom_sf(data = zon, mapping = aes(),
#        fill = "grey", color = NA) +
geom_sf(data = vacantsf, mapping = aes())
ggplot() +
geom_sf(data = zon, mapping = aes(),
fill = "grey", color = NA) +
geom_sf(data = vacantsf, mapping = aes())
ggplot() +
geom_sf(data = zon, mapping = aes(),
fill = "grey", color = NA)
ggplot() +
geom_sf(data = zon, mapping = aes(),
fill = "grey", color = NA) +
geom_sf(data = vacantsf, mapping = aes()) +
coord_sf(crs = NULL)
ggplot() +
geom_sf(data = zon, mapping = aes(),
fill = "grey", color = NA) +
geom_sf(data = vacantsf, mapping = aes()) +
coord_sf(crs = st_crs(zon))
st_transform(vacantsf, crs = 4326)
vacantsf <- vacant %>%
filter(!is.na(long), !is.na(lat)) %>%
st_as_sf(coords = c("long", "lat")) %>%
st_set_crs(st_crs(zon))
st_transform(vacantsf, crs = 4326)
vacantsf <- st_transform(vacantsf, crs = 4326)
zon <- st_transform(zon, crs = 4326)
ggplot() +
geom_sf(data = zon, mapping = aes(),
fill = "grey", color = NA) +
geom_sf(data = vacantsf, mapping = aes()) +
coord_sf(crs = st_crs(zon))
View(zon)
ggplot() +
geom_sf(data = zon, mapping = aes(),
fill = "grey", color = NA) +
geom_sf(data = vacantsf, mapping = aes())
ggplot() +
geom_sf(data = zon, mapping = aes(),
fill = "grey", color = NA)
ggplot() +
#geom_sf(data = zon, mapping = aes(),
#        fill = "grey", color = NA) +
geom_sf(data = vacantsf, mapping = aes())
vacantsf <- vacant %>%
filter(!is.na(long), !is.na(lat)) %>%
st_as_sf(coords = c("long", "lat")) %>%
st_set_crs(st_crs(zon))
ggplot() +
#geom_sf(data = zon, mapping = aes(),
#        fill = "grey", color = NA) +
geom_sf(data = vacantsf, mapping = aes())
ggplot() +
geom_sf(data = zon, mapping = aes(),
fill = "grey", color = NA) +
geom_sf(data = vacantsf, mapping = aes())
st_crs(vacantsf)
ggplot() +
geom_sf(data = zon, mapping = aes(),
fill = "grey", color = NA) +
geom_sf(data = vacantsf, mapping = aes())
?st_join
x <- st_join(vacantsf, zon)
View(x)
count(x, is.na(ZN_DESIG))
count(x, ZN_DESIG == zoning_code)
count(x, ZN_DESIG == zoning)
x <- x %>% select(everything(), zoning, ZN_DESIG)
test_zoning <- x %>%
mutate(zflag = ifelse(ZN_DESIG == zoning,
0,
1)) %>%
select(propaddress, zoning, ZN_DESIG,
category_detail, geometry)
test_zoning <- x %>%
mutate(zflag = ifelse(ZN_DESIG == zoning,
0,
1)) %>%
filter(flag == 1) %>%
select(propaddress, zoning, ZN_DESIG,
category_detail, geometry)
test_zoning <- x %>%
mutate(zflag = ifelse(ZN_DESIG == zoning,
0,
1)) %>%
filter(zflag == 1) %>%
select(propaddress, zoning, ZN_DESIG,
category_detail, geometry)
View(test_zoning)
count(x, ZN_DESIG == zoning)
jur1 <- jur %>%
filter(!is.na(long), !is.na(lat))
jursf <- jur %>%
filter(!is.na(long), !is.na(lat)) %>%
st_as_sf(coords = c("long", "lat")) %>%
st_set_crs(st_crs(zon))
y <- st_join(jursf, zon)
count(y, is.na(ZN_DESIG))
test_all <- y %>%
mutate(zflag = ifelse(ZN_DESIG == zoning,
0,
1)) %>%
filter(zflag == 1) %>%
select(propaddress, zoning, ZN_DESIG,
category_detail, geometry)
View(test_all)
source("../Macros/read-bk.R")
source("../Macros/filter-bk.R")
source("../Macros/select-vars.R")
source("../Macros/sample-properties.R")
source("../Macros/classify-addresses.R")
View(read_bk)
zon <- read_sf(dsn = zdir,
layer = zfile)
st_geometry(zon)
vacant <- jur %>%
filter(category == "vacant") %>%
filter(!is.na(long), !is.na(lat))
vacantsf <- vacant %>%
filter(!is.na(long), !is.na(lat)) %>%
st_as_sf(coords = c("long", "lat")) %>%
st_set_crs(st_crs(zon))
ggplot() +
geom_sf(data = zon, mapping = aes(),
fill = "grey", color = NA) +
geom_sf(data = vacantsf, mapping = aes())
zon <- st_transform(zon, crs = 4326)
ggplot() +
geom_sf(data = zon, mapping = aes(),
fill = "grey", color = NA) +
geom_sf(data = vacantsf, mapping = aes())
zon <- st_transform(zon, crs = 2283)
zon <- st_transform(zon, crs = 4326)
ggplot() +
geom_sf(data = zon, mapping = aes(),
fill = "grey", color = NA) +
geom_sf(data = vacantsf, mapping = aes())
vacantsf <- vacant %>%
filter(!is.na(long), !is.na(lat)) %>%
st_as_sf(coords = c("long", "lat")) %>%
st_set_crs(2283)
zon <- st_transform(zon, crs = 2283)
View(zon)
ggplot() +
geom_sf(data = zon, mapping = aes(),
fill = "grey", color = NA) +
geom_sf(data = vacantsf, mapping = aes())
zon <- read_sf(dsn = zdir,
layer = zfile)
ggplot(zon) +
geom_sf(mapping = aes(fill = ZN_DESIG))
vacant <- jur %>%
filter(category == "vacant") %>%
filter(!is.na(long), !is.na(lat))
View(vacant)
vacantsf <- vacant %>%
filter(!is.na(long), !is.na(lat)) %>%
st_as_sf(coords = c("long", "lat")) %>%
st_set_crs(zon)
vacantsf <- vacant %>%
filter(!is.na(long), !is.na(lat)) %>%
st_as_sf(coords = c("long", "lat")) %>%
st_set_crs(st_crs(zon))
ggplot() +
geom_sf(data = zon, mapping = aes(),
fill = "grey", color = NA) +
geom_sf(data = vacantsf, mapping = aes())
zon <- st_transform(zon, crs = 4326)
vacantsf <- vacant %>%
filter(!is.na(long), !is.na(lat)) %>%
st_as_sf(coords = c("long", "lat")) %>%
st_set_crs(st_crs(zon))
ggplot() +
geom_sf(data = zon, mapping = aes(),
fill = "grey", color = NA) +
geom_sf(data = vacantsf, mapping = aes())
zon <- st_transform(zon, crs = 2283)
vacantsf <- vacant %>%
filter(!is.na(long), !is.na(lat)) %>%
st_as_sf(coords = c("long", "lat")) %>%
st_set_crs(st_crs(zon))
ggplot() +
geom_sf(data = zon, mapping = aes(),
fill = "grey", color = NA) +
geom_sf(data = vacantsf, mapping = aes())
zon <- st_transform(zon, crs = 4326)
vacantsf <- vacant %>%
filter(!is.na(long), !is.na(lat)) %>%
st_as_sf(coords = c("long", "lat")) %>%
st_set_crs(st_crs(zon))
ggplot() +
geom_sf(data = zon, mapping = aes(),
fill = "grey", color = NA) +
geom_sf(data = vacantsf, mapping = aes())
x <- st_join(vacantsf, zon)
count(x, is.na(ZN_DESIG))
count(x, ZN_DESIG == zoning)
View(test_all)
View(zon)
View(jur)
sample_properties(jur, "RESIDENTIAL COST-VAL - SINGLE-FAM DET", 5)
sf <- sample_properties(jur, "RESIDENTIAL COST-VAL - SINGLE-FAM DET", 5)
View(sf)
=======
countylandusedescription %in% midrise ~ "mid-rise",
countylandusedescription %in% parking ~ "parking",
countylandusedescription %in% stacked ~ "stacked",
countylandusedescription %in% coop ~ "co-op",
countylandusedescription %in% duplex ~ "duplex",
countylandusedescription %in% other ~ "other"))
rm(garden, highrise, midrise, parking, stacked, coop, duplex, other)
garden <- c("APARTMENT - GARDEN",
"SALES APPR CONDO/GARDEN")
highrise <- c("APARTMENT - HIGH-RISE",
"SALES APPR CONDO/HIGH RISE")
midrise <- c("SALES APPR CONDO/MID RISE",
"APARTMENT - MID-RISE")
parking <- c("APARTMENT - PARKING")
stacked <- c("SALES APPR CONDO/STACKED")
coop <- c("SALES APPR CONDO/CO-OP")
duplex <- c("RESIDENTIAL COST-VAL - DUPLEX")
other <- c("AFFORDABLE DWELLING UNIT",
"COMMUNITY BENEFIT UNIT",
"MULTI-FAM IMPR/NO SITE PLAN",
"MULTI-FAM IMPR/SITE PLAN",
"NOT VALUED CONDO HOA")
jur <- jur %>%
mutate(building_type = case_when(
countylandusedescription %in% garden ~ "garden",
countylandusedescription %in% highrise  ~ "high-rise",
countylandusedescription %in% midrise ~ "mid-rise",
countylandusedescription %in% parking ~ "parking",
countylandusedescription %in% stacked ~ "stacked",
countylandusedescription %in% coop ~ "co-op",
countylandusedescription %in% duplex ~ "duplex",
countylandusedescription %in% other ~ "other"))
rm(garden, highrise, midrise, parking, stacked, coop, duplex, other)
count(jur, lotsizeareaunit)
jur <- jur %>%
mutate(lotsize_acres = case_when(lotsizeareaunit == "AC" ~ lotsizeorarea ,
lotsizeareaunit == "SF" ~ lotsizeorarea / 43560),
lotsize_sf = lotsize_acres * 43560) %>%
mutate_at(vars(lotsize_acres, lotsize_sf), ~ replace(., .==0, NA))
jur <- jur %>%
mutate(parcel_address = substr(assessorsparcelnumberapnpin, 1, 6))
bad_parcels <- jur %>%
group_by(propaddress) %>%
summarize(parcel = list(parcel_address)) %>%
mutate(unq_parcels = as.integer(map(parcel,
function(x) length(unique(x))))) %>%
filter(unq_parcels > 1)
bad_addresses <- bad_parcels %>%
pull(propaddress)
jur <- jur %>%
mutate(parcel_address = ifelse(propaddress %in% bad_addresses,
NA,
parcel_address))
rm(bad_addresses, bad_parcels)
jur <- jur %>%
mutate(parcel_address = substr(assessorsparcelnumberapnpin, 1, 6))
View(jur)
bad_parcels <- jur %>%
group_by(propaddress) %>%
summarize(parcel = list(parcel_address))
View(bad_parcels)
s <- c(1, 2, 2)
length(s)
unique(length(s))
unique(s)
length(unique(x))
bad_parcels <- jur %>%
group_by(propaddress) %>%
summarize(parcel = list(parcel_address)) %>%
mutate(unq_parcels = as.integer(map(parcel,
function(x) length(unique(x))))) %>%
filter(unq_parcels > 1)
View(bad_parcels)
bad_addresses <- bad_parcels %>%
pull(propaddress)
x <- jur %>%
filter(residential == 1) %>%
group_by(propaddress) %>%
count() %>%
nrow()
y <- jur %>%
filter(residential == 1) %>%
group_by(propaddress, parcel_address) %>%
count() %>%
nrow()
if (x == y) {
print(paste0(x, " = ", y, ": clean collapse"))
} else if (y > x) {
warning("additional observations introduced")
}
jur <- jur %>%
mutate(parcel_address = ifelse(propaddress %in% bad_addresses,
NA,
parcel_address))
x <- jur %>%
filter(residential == 1) %>%
group_by(propaddress) %>%
count() %>%
nrow()
y <- jur %>%
filter(residential == 1) %>%
group_by(propaddress, parcel_address) %>%
count() %>%
nrow()
if (x == y) {
print(paste0(x, " = ", y, ": clean collapse"))
} else if (y > x) {
warning("additional observations introduced")
}
jur <- jur %>%
mutate(house_letter = ifelse(str_detect(prophouseno, "[:alpha:]") == 1, 1, 0),
oldadd = propaddress,
new_houseno = ifelse(house_letter == 1,
str_replace(prophouseno, "[:alpha:]", ""),
prophouseno),
propaddress = ifelse(house_letter == 1,
paste(str_replace_all(new_houseno, "-", ""),
propstreetname,
propstreetsuffix,
sep = " "),
propaddress))
jur %>%
filter(house_letter == 1) %>%
select(oldadd, propaddress, category_detail) %>%
head(20)
stopifnot(sum(is.na(jur$propaddress)) == nrow(filter(jur,
is.na(propaddress) | is.na(prophouseno))))
jur <- jur %>%
classify_addresses()
if (TRUE %in% is.na(jur$address_type)) {
warning("NAs in address_type")
}
jur <- jur %>%
mutate(address_type = ifelse(category_detail %in% c("townhouse", "sf attached"),
"single",
address_type))
multiples <- jur %>%
filter(address_type == "multiple")
singles <- jur %>%
filter(address_type == "single")
missing <- jur %>%
filter(address_type == "missing")
View(missing)
nested <- multiples %>%
group_by(propaddress, parcel_address) %>%
summarize_at(vars(zoning,lotsize_sf,
buildingarea, countylandusedescription,
residential, category, category_detail, building_type,
yearbuilt, long, lat), list)
View(nested)
nested <- multiples %>%
group_by(propaddress, parcel_address) %>%
summarize_at(vars(zoning,lotsize_sf,
buildingarea, countylandusedescription,
residential, category, category_detail, building_type,
yearbuilt, long, lat), list) %>%
rename_at(vars(-propaddress, -parcel_address), ~ paste0(., "_list")) %>%
mutate(nprops = map(zoning_list, length),
zoning = map(zoning_list, Mode),
lotsize_sf_sum = map_dbl(lotsize_sf_list, sum, na.rm = TRUE),
buildingarea = map_dbl(buildingarea_list, sum, na.rm = TRUE),
countylandusedescription = map(countylandusedescription_list, Mode),
residential = map(residential_list, max, na.rm = FALSE),
category = map(category_list, Mode),
category_detail = map(category_detail_list, Mode),
building_type = ifelse(category == "MF",
map(building_type_list, Mode),
NA),
long = map(long_list, median),
lat = map(lat_list, median),
# year built handled differently due to missing values
yearbuilt_list = ifelse(as.integer(map(yearbuilt_list, function(x) sum(!is.na(x)))) == 0,
NA,
yearbuilt_list),
yearbuilt = ifelse(!is.na(yearbuilt_list),
map(yearbuilt_list, max, na.rm = TRUE),
NA))
weird <- tibble(propaddress = c( "1330 S FAIR ST", "1633 N COLONIAL TER", "1117 N VERMONT ST", "1134 N STUART ST", "1300 N MEADE ST"),
instance = 1:5)
weird1 <- nested %>%
filter(propaddress %in% weird$propaddress) %>%
left_join(weird, by = "propaddress") %>%
select(instance, propaddress, nprops, lotsize_sf_list, lotsize_sf_sum) %>%
arrange(instance)
library(tidyverse)
source("../Macros/read-jurisdiction.R")
knitr::opts_chunk$set(warning = FALSE)
knitr::opts_chunk$set(message = FALSE)
# knitr::opts_chunk$set(eval = FALSE)
library(tidyverse)
source("../Macros/read-jurisdiction.R")
if (!dir.exists("../Data")) {
dir.create("../Data")
}
currentfips <- "51013"
filepath <- "arlington"
if (!exists("jur")) {
jur <- read_jurisdiction(filepath)
} else {
warning(filepath, " data already read in")
}
vacant <- jur %>%
filter(category == "vacant")
vacant %>%
group_by(category_detail) %>%
summarize_at(vars(propaddress, lotsize_sf, zoning),
~ sum(is.na(.))) %>%
mutate_at(vars(propaddress, lotsize_sf, zoning),
.funs = funs(percent = scales::percent(. / nrow(vacant)))) %>%
knitr::kable(caption = "Number and percent of missing values")
if (!file.exists(paste0("L:/Libraries/RegHsg/Doc/zoning-codes/",
filepath,
"-zoning-code.csv"))) {
stop("Move zoning file for jurisdiction to L:/Libraries/RegHsg/Doc/zoning-codes directory")
}
z <- cols(
Code = col_character(),
`District Type` = col_character(),
`Type of Dwelling` = col_character(),
`Site Area` = col_number(),
`Lot area` = col_number(),
`Lot area per dwelling unit (sq. ft.) (minimum)` = col_number(),
`Lot Width (average minimum, ft)` = col_character(),
`Height (ft)` = col_double(),
`Height (stories)` = col_double(),
`Lot coverage maximum` = col_number(),
`Floor area minimum` = col_double(),
`Maximum Density of Floor-Area-Ratio (FAR)` = col_character(),
`Setbacks (centerline)` = col_character(),
`Setbacks (right of way line)` = col_double(),
`Front/Side yard (ft)` = col_double(),
`Side yard (both sides: minimum percent of required width)` = col_number(),
Frontage = col_double(),
Comments = col_character()
)
zoningcode <- read_csv(paste0("L:/Libraries/RegHsg/Doc/zoning-codes/",
filepath,
"-zoning-code.csv"),
col_types = z)
names(zoningcode) <-
c("zoning_code", "district_type", "dwelling_type",
"site_area", "lot_area", "lotarea_per_unit",
"lot_width", "height_ft", "height_stories",
"lot_coverage_max", "floor_area_min", "far_max",
"setbacks_center", "setbacks_row",
"front_side_yard", "side_yard", "frontage", "comments")
# fix variables read in as whole numbers (should be percent)
zoningcode <- zoningcode %>%
mutate_at(vars(lot_coverage_max, side_yard),
~ . / 100)
rm(z)
zoningcode %>%
count(dwelling_type) %>%
knitr::kable()
zoningcode <- zoningcode %>%
filter(!dwelling_type %in% c("All",
"All Other",
"Duplex; share a lot line with RA, C, or M",
"Semi-detatched; share a lot line with RA, C, or M"))
zoningcode <- zoningcode %>%
mutate(dwelling_type = factor(dwelling_type,
levels = c("Multiple-family",
"Townhouse",
"Duplex",
"Semi-detached",
"Other Residential",
"One Family Dwelling")))
vacant_zoning <- zoningcode %>%
group_by(zoning_code) %>%
slice(which.min(dwelling_type))
stopifnot(
length(unique(zoningcode$zoning_code)) == length(unique(vacant_zoning$zoning_code))
)
stopifnot(nrow(vacant_zoning) == nrow(count(vacant_zoning, zoning_code)))
vacant <- vacant %>%
mutate(zoning_code = ifelse(str_detect(zoning, "/") == TRUE,
NA,
zoning),
zoning_code = ifelse(zoning_code == "character(0)",
NA,
zoning_code),
zoning_code = ifelse(zoning_code == "RC",
"R-C",
zoning_code),
zoning_code = ifelse(zoning_code == "C-O-ROSSLYN",
"C-O Rosslyn",
zoning_code))
zoningdata <- left_join(vacant, vacant_zoning, by = "zoning_code")
anti_join(vacant, vacant_zoning, by = "zoning_code") %>%
count(zoning_code) %>%
knitr::kable()
missing_zoning <- vacant %>%
filter(is.na(zoning_code))
missing_zoning %>%
summarize(missing_addreess = sum(is.na(propaddress)),
zoning_tie = sum(str_detect(zoning, "/") == TRUE, na.rm = TRUE))
missing_zoning %>%
filter(!is.na(propaddress),
str_detect(zoning, "/") == FALSE) %>%
nrow()
count(zoningdata lotsize_sf > 7500)
count(zoningdata, lotsize_sf > 7500)
View(zoningdata)
count(zoningdata, lotsize_sf > lot_area)
count(zoningdata, lotsize_sf < lot_area)
count(zoningdata, lotsize_sf <= lot_area)
View(zoningcode)
View(zoningcode)
z <- cols(
Code = col_character(),
`District Type` = col_character(),
`Type of Dwelling` = col_character(),
`Site Area` = col_number(),
`Lot area` = col_number(),
`Lot area per dwelling unit (sq. ft.) (minimum)` = col_number(),
`Lot Width (average minimum, ft)` = col_character(),
`Height (ft)` = col_double(),
`Height (stories)` = col_double(),
`Lot coverage maximum` = col_number(),
`Floor area minimum` = col_double(),
`Maximum Density of Floor-Area-Ratio (FAR)` = col_character(),
`Setbacks (centerline)` = col_character(),
`Setbacks (right of way line)` = col_double(),
`Front/Side yard (ft)` = col_double(),
`Side yard (both sides: minimum percent of required width)` = col_number(),
Frontage = col_double(),
Comments = col_character()
)
zoningcode <- read_csv(paste0("L:/Libraries/RegHsg/Doc/zoning-codes/",
filepath,
"-zoning-code.csv"),
col_types = z)
names(zoningcode) <-
c("zoning_code", "district_type", "dwelling_type",
"site_area", "lot_area", "lotarea_per_unit",
"lot_width", "height_ft", "height_stories",
"lot_coverage_max", "floor_area_min", "far_max",
"setbacks_center", "setbacks_row",
"front_side_yard", "side_yard", "frontage", "comments")
# fix variables read in as whole numbers (should be percent)
zoningcode <- zoningcode %>%
mutate_at(vars(lot_coverage_max, side_yard),
~ . / 100)
rm(z)
zoningcode %>%
count(dwelling_type) %>%
knitr::kable()
zoningcode <- zoningcode %>%
filter(!dwelling_type %in% c("All",
"All Other",
"Duplex; share a lot line with RA, C, or M",
"Semi-detatched; share a lot line with RA, C, or M"))
zoningcode <- zoningcode %>%
mutate(dwelling_type = factor(dwelling_type,
levels = c("Multiple-family",
"Townhouse",
"Duplex",
"Semi-detached",
"Other Residential",
"One Family Dwelling")))
vacant <- vacant %>%
mutate(zoning_code = ifelse(str_detect(zoning, "/") == TRUE,
NA,
zoning),
zoning_code = ifelse(zoning_code == "character(0)",
NA,
zoning_code),
zoning_code = ifelse(zoning_code == "RC",
"R-C",
zoning_code),
zoning_code = ifelse(zoning_code == "C-O-ROSSLYN",
"C-O Rosslyn",
zoning_code))
zoningdata <- left_join(vacant, zoningcode, by = "zoning_code")
anti_join(vacant, vacant_zoning, by = "zoning_code") %>%
count(zoning_code) %>%
knitr::kable()
vacant <- vacant %>%
mutate(zoning_code = ifelse(str_detect(zoning, "/") == TRUE,
NA,
zoning),
zoning_code = ifelse(zoning_code == "character(0)",
NA,
zoning_code),
zoning_code = ifelse(zoning_code == "RC",
"R-C",
zoning_code),
zoning_code = ifelse(zoning_code == "C-O-ROSSLYN",
"C-O Rosslyn",
zoning_code),
zoning_code = ifelse(zoning_code == "RA-H-3.2",
"RA-H 3.2",
zoning_code))
zoningdata <- left_join(vacant, zoningcode, by = "zoning_code")
anti_join(vacant, vacant_zoning, by = "zoning_code") %>%
count(zoning_code) %>%
knitr::kable()
zoningdata1 <- zoningdata %>%
filter(lotsize_sf >= lot_area)
zoningdata1 <- zoningdata %>%
filter(lotsize_sf >= lot_area) %>%
group_by(zoning_code) %>%
slice(which.min(zoning_code))
View(zoningdata)
zoningdata1 <- zoningdata %>%
mutate(dwelling_type = factor(dwelling_type,
levels = c("Multiple-family",
"Duplex",
"Townhouse",
"Semi-detached",
"Other Residential",
"One Family Dwelling"))) %>%
filter(lotsize_sf >= lot_area) %>%
group_by(zoning_code) %>%
slice(which.min(zoning_code))
zoningdata1 <- zoningdata %>%
mutate(dwelling_type = factor(dwelling_type,
levels = c("Multiple-family",
"Duplex",
"Townhouse",
"Semi-detached",
"Other Residential",
"One Family Dwelling"))) %>%
filter(lotsize_sf >= lot_area) %>%
group_by(zoning_code) %>%
slice(which.min(dwelling_type))
View(zoningdata1)
zoningdata1 <- zoningdata %>%
mutate(dwelling_type = factor(dwelling_type,
levels = c("Multiple-family",
"Duplex",
"Townhouse",
"Semi-detached",
"Other Residential",
"One Family Dwelling"))) %>%
filter(lotsize_sf >= lot_area) %>%
group_by(dwelling_type) %>%
slice(which.min(dwelling_type))
zoningdata1 <- zoningdata %>%
mutate(dwelling_type = factor(dwelling_type,
levels = c("Multiple-family",
"Duplex",
"Townhouse",
"Semi-detached",
"Other Residential",
"One Family Dwelling"))) %>%
filter(lotsize_sf >= lot_area) %>%
group_by(propaddress) %>%
slice(which.min(dwelling_type))
View(zoningdata1)
zoningdata1 <- zoningdata %>%
mutate(dwelling_type = factor(dwelling_type,
levels = c("Multiple-family",
"Duplex",
"Townhouse",
"Semi-detached",
"Other Residential",
"One Family Dwelling"))) %>%
filter(lotsize_sf >= lot_area) %>%
# group_by(propaddress) %>%
slice(which.min(dwelling_type))
zoningdata1 <- zoningdata %>%
mutate(dwelling_type = factor(dwelling_type,
levels = c("Multiple-family",
"Duplex",
"Townhouse",
"Semi-detached",
"Other Residential",
"One Family Dwelling"))) %>%
filter(lotsize_sf >= lot_area) %>%
group_by(propaddress) %>%
slice(which.min(dwelling_type))
zoningdata1 <- zoningdata %>%
mutate(dwelling_type = factor(dwelling_type,
levels = c("Multiple-family",
"Duplex",
"Townhouse",
"Semi-detached",
"Other Residential",
"One Family Dwelling"))) %>%
filter(lotsize_sf >= lot_area)
zoningdata1 %>% group_by(propaddress) %>% count()
zoningdata1 <- zoningdata %>%
filter(lotsize_sf >= lot_area) %>%
group_by(propaddress) %>%
slice(which.min(dwelling_type))
View(zoningdata1)
zoningdata1 <- zoningdata %>%
filter(!is.na(lot_area),
lotsize_sf >= lot_area) %>%
group_by(propaddress) %>%
slice(which.min(dwelling_type))
zoningdata1 <- zoningdata %>%
filter(!is.na(lot_area),
lotsize_sf >= lot_area)
zoningdata %>% filter(!is.na(lot_area), lotsize_sf >= lot_area)
zoningdata %>% filter(!is.na(lot_area)) %>% count(lotsize_sf >= lot_area)
zoningdata1 <- zoningdata %>%
filter(!is.na(lot_area),
lotsize_sf >= lot_area) %>%
group_by(propaddress) %>%
slice(which.min(dwelling_type))
View(zoningdata1)
missing_zoning <- vacant %>%
filter(is.na(zoning_code))
missing_zoning %>%
summarize(missing_addreess = sum(is.na(propaddress)),
zoning_tie = sum(str_detect(zoning, "/") == TRUE, na.rm = TRUE))
missing_zoning %>%
summarize(missing_address = sum(is.na(propaddress)),
zoning_tie = sum(str_detect(zoning, "/") == TRUE, na.rm = TRUE))
View(missing_zoning)
>>>>>>> analysis-#18
