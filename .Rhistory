"GEN COMM - NEIGHBORHOOD CTR",
"GEN COMM - OTHER",
"GEN COMM - REST/EATING FACILITY",
"GEN COMM - RETAIL/STRIP",
"GEN COMM - SMALL OFFICE",
"GEN COMM IMPR-LAND/NO SITE PLAN",
"GEN COMM IMPR-LAND/SITE PLAN",
"GEN COMM/PARKING",
"HOTEL - FULL SERVICE",
"HOTEL - LAND/OTHER",
"HOTEL - LIMITED SERVICE",
"HOTEL - LODGING",
"HOTEL - SELECT DRIVE",
"HOTEL RESIDENCE SUITES",
"MIXED USE",
"SFD - COMM ZONED/NO SITE PLAN",
"SFD - COMM ZONED/SITE PLAN")
mf <- c("AFFORDABLE DWELLING UNIT",
"APARTMENT - GARDEN",
"APARTMENT - HIGH-RISE",
"APARTMENT - MID-RISE",
"APARTMENT - PARKING",
"COMMUNITY BENEFIT UNIT",
"MULTI-FAM IMPR/NO SITE PLAN",
"MULTI-FAM IMPR/SITE PLAN",
"NOT VALUED CONDO HOA",
"RESIDENTIAL COST-VAL - DUPLEX",
"SALES APPR CONDO/CO-OP",
"SALES APPR CONDO/GARDEN",
"SALES APPR CONDO/HIGH RISE",
"SALES APPR CONDO/MID RISE",
"SALES APPR CONDO/STACKED")
office <- c("OFFICE BLDG IMPR-LAND/SITE PLAN",
"OFFICE BLDG/7 OR MORE STORIES",
"OFFICE BLDG/PARKING",
"OFFICE BLDG/UNDER 7 STORIES")
sf <- c("NOT VALUED COSTED - HOA/SITE PLAN",
"RESIDENTIAL COST-VAL - IMPR/SF & TW",
"RESIDENTIAL COST-VAL - SIDE BY SIDE",
"RESIDENTIAL COST-VAL - SINGLE-FAM DET",
"RESIDENTIAL COST-VAL - TOWNHOUSE/CO",
"RESIDENTIAL COST-VAL - TOWNHOUSE/FSO",
"SFD - APT ZONED/NO SITE PLAN",
"SFD - APT ZONED/SITE PLAN")
vacant <- c("MULTI-FAM VACANT/NO SITE PLAN",
"MULTI-FAM VACANT/SITE PLAN",
"RESIDENTIAL COST-VAL - VAC/SF & TW",
"VACANT RESIDENTIAL",
"GEN COMM VAC-LAND/NO SITE PLAN",
"GEN COMM VAC-LAND/SITE PLAN",
"OFFICE BLDG VAC-LAND/NO SITE PLAN",
"OFFICE BLDG VAC-LAND/SITE PLAN",
"VACANT COMMERCIAL",
"VACANT EXEMPT",
"VACANT LIGHT INDUSTRIAL",
"VACANT OFFICE")
jur <- jur %>%
mutate(category = case_when(
countylandusedescription %in% commercial ~ "commercial",
countylandusedescription %in% mf ~ "mf",
countylandusedescription %in% office ~ "office",
countylandusedescription %in% sf ~ "sf",
countylandusedescription %in% vacant ~ "vacant"))
rm(commercial, office, mf, sf, vacant)
apartment <- c("AFFORDABLE DWELLING UNIT",
"APARTMENT - GARDEN",
"APARTMENT - HIGH-RISE",
"APARTMENT - MID-RISE",
"APARTMENT - PARKING",
"COMMUNITY BENEFIT UNIT",
"MULTI-FAM IMPR/NO SITE PLAN",
"MULTI-FAM IMPR/SITE PLAN")
commercial <- c("COMMERCIAL CONDO",
"GEN COMM-IND - AUTO DEALERSHIP",
"GEN COMM-IND - SELF-STORAGE",
"GEN COMM-IND - SERVICE STATION",
"GEN COMM-IND - WAREHOUSE",
"GEN COMM - BANK",
"GEN COMM - FAST FOOD",
"GEN COMM - HEALTH CARE FACILITY",
"GEN COMM - MIXED OFFICE/COMM",
"GEN COMM - NEIGHBORHOOD CTR",
"GEN COMM - OTHER",
"GEN COMM - REST/EATING FACILITY",
"GEN COMM - RETAIL/STRIP",
"GEN COMM - SMALL OFFICE",
"GEN COMM IMPR-LAND/NO SITE PLAN",
"GEN COMM IMPR-LAND/SITE PLAN",
"GEN COMM/PARKING",
"HOTEL - FULL SERVICE",
"HOTEL - LAND/OTHER",
"HOTEL - LIMITED SERVICE",
"HOTEL - LODGING",
"HOTEL - SELECT DRIVE",
"HOTEL RESIDENCE SUITES",
"MIXED USE")
condo <- c("NOT VALUED CONDO HOA",
"SALES APPR CONDO/CO-OP",
"SALES APPR CONDO/GARDEN",
"SALES APPR CONDO/HIGH RISE",
"SALES APPR CONDO/MID RISE",
"SALES APPR CONDO/STACKED")
duplex <- c("RESIDENTIAL COST-VAL - DUPLEX")
office <- c("OFFICE BLDG IMPR-LAND/SITE PLAN",
"OFFICE BLDG/7 OR MORE STORIES",
"OFFICE BLDG/PARKING",
"OFFICE BLDG/UNDER 7 STORIES")
sfattached <- c("RESIDENTIAL COST-VAL - SIDE BY SIDE")
sfdetached <- c("NOT VALUED COSTED - HOA/SITE PLAN",
"RESIDENTIAL COST-VAL - IMPR/SF & TW",
"RESIDENTIAL COST-VAL - SINGLE-FAM DET",
"SFD - APT ZONED/NO SITE PLAN",
"SFD - APT ZONED/SITE PLAN",
"SFD - COMM ZONED/NO SITE PLAN",
"SFD - COMM ZONED/SITE PLAN")
townhouse <-  c("RESIDENTIAL COST-VAL - TOWNHOUSE/CO",
"RESIDENTIAL COST-VAL - TOWNHOUSE/FSO")
vacantcom <- c("GEN COMM VAC-LAND/NO SITE PLAN",
"GEN COMM VAC-LAND/SITE PLAN",
"VACANT COMMERCIAL")
vacantexempt <- c("VACANT EXEMPT")
vacantlight <- c("VACANT LIGHT INDUSTRIAL")
vacantmf <- c("MULTI-FAM VACANT/NO SITE PLAN",
"MULTI-FAM VACANT/SITE PLAN")
vacantoffice <- c("OFFICE BLDG VAC-LAND/NO SITE PLAN",
"OFFICE BLDG VAC-LAND/SITE PLAN",
"VACANT OFFICE")
vacantres <- c("VACANT RESIDENTIAL")
vacantsf <- c("RESIDENTIAL COST-VAL - VAC/SF & TW")
jur <- jur %>%
mutate(category_detail = case_when(
countylandusedescription %in% apartment ~ "apartment",
countylandusedescription %in% commercial ~ "commercial",
countylandusedescription %in% condo ~ "condo",
countylandusedescription %in% duplex ~ "duplex",
countylandusedescription %in% office ~ "office",
countylandusedescription %in% sfattached ~ "sf attached",
countylandusedescription %in% sfdetached ~ "sf detached",
countylandusedescription %in% townhouse ~ "townhouse",
countylandusedescription %in% vacantcom ~ "vacant commercial",
countylandusedescription %in% vacantexempt ~ "vacant exempt",
countylandusedescription %in% vacantlight ~ "vacant light industrial",
countylandusedescription %in% vacantmf ~ "vacant mf",
countylandusedescription %in% vacantoffice ~ "vacant office",
countylandusedescription %in% vacantres ~ "vacant residential",
countylandusedescription %in% vacantsf ~ "vacant sf"))
rm(apartment, commercial, condo, duplex,
office, sfattached, sfdetached, townhouse,
vacantcom, vacantexempt, vacantlight, vacantmf,
vacantoffice, vacantres, vacantsf)
garden <- c("APARTMENT - GARDEN",
"SALES APPR CONDO/GARDEN")
highrise <- c("APARTMENT - HIGH-RISE",
"SALES APPR CONDO/HIGH RISE")
midrise <- c("SALES APPR CONDO/MID RISE",
"APARTMENT - MID-RISE")
parking <- c("APARTMENT - PARKING")
stacked <- c("SALES APPR CONDO/STACKED")
coop <- c("SALES APPR CONDO/CO-OP")
duplex <- c("RESIDENTIAL COST-VAL - DUPLEX")
other <- c("AFFORDABLE DWELLING UNIT",
"COMMUNITY BENEFIT UNIT",
"MULTI-FAM IMPR/NO SITE PLAN",
"MULTI-FAM IMPR/SITE PLAN",
"NOT VALUED CONDO HOA")
jur <- jur %>%
mutate(building_type = case_when(
countylandusedescription %in% garden ~ "garden",
countylandusedescription %in% highrise  ~ "high-rise",
countylandusedescription %in% midrise ~ "mid-rise",
countylandusedescription %in% parking ~ "parking",
countylandusedescription %in% stacked ~ "stacked",
countylandusedescription %in% coop ~ "co-op",
countylandusedescription %in% duplex ~ "duplex",
countylandusedescription %in% other ~ "other"))
rm(garden, highrise, midrise, parking, stacked, coop, duplex, other)
count(jur, residential)
count(jur, is.na(residential))
if (TRUE %in% is.na(jur$residential)) {
warning("NAs introduced")
}
count(jur, category)
count(jur, is.na(category))
if (TRUE %in% is.na(jur$category)) {
warning("NAs introduced")
}
count(jur, category_detail)
count(jur, is.na(category_detail))
if (TRUE %in% is.na(jur$category_detail)) {
warning("NAs introduced")
}
newcat <- sum(!is.na(jur$building_type))
mf <- nrow(filter(jur, category == "mf"))
if (mf != newcat) {
warning(newcat, " observations categorized, expecting ", mf)
}
rm(newcat, mf)
count(jur, lotsizeareaunit)
jur <- jur %>%
mutate(lotsize_acres = case_when(lotsizeareaunit == "AC" ~ lotsizeorarea ,
lotsizeareaunit == "SF" ~ lotsizeorarea / 43560),
lotsize_sf = lotsize_acres * 43560) %>%
mutate_at(vars(lotsize_acres, lotsize_sf), ~ replace(., .==0, NA))
jur <- jur %>%
mutate(parcel_address = substr(assessorsparcelnumberapnpin, 1, 6))
bad_parcels <- jur %>%
group_by(propaddress) %>%
summarize(parcel = list(parcel_address)) %>%
mutate(unq_parcels = as.integer(map(parcel,
function(x) length(unique(x))))) %>%
filter(unq_parcels > 1)
bad_addresses <- bad_parcels %>%
pull(propaddress)
jur <- jur %>%
mutate(parcel_address = ifelse(propaddress %in% bad_addresses,
NA,
parcel_address))
rm(bad_addresses, bad_parcels)
x <- jur %>%
filter(residential == 1) %>%
group_by(propaddress) %>%
count() %>%
nrow()
y <- jur %>%
filter(residential == 1) %>%
group_by(propaddress, parcel_address) %>%
count() %>%
nrow()
if (x == y) {
print(paste0(x, " = ", y, ": clean collapse"))
} else if (y > x) {
warning("additional observations introduced")
}
rm(x, y)
jur <- jur %>%
mutate(house_letter = ifelse(str_detect(prophouseno, "[:alpha:]") == 1, 1, 0),
oldadd = propaddress,
new_houseno = ifelse(house_letter == 1,
str_replace(prophouseno, "[:alpha:]", ""),
prophouseno),
propaddress = ifelse(house_letter == 1,
paste(str_replace_all(new_houseno, "-", ""),
propstreetname,
propstreetsuffix,
sep = " "),
propaddress))
jur2 %>%
filter(house_letter == 1) %>%
select(oldadd, propaddress, category_detail) %>%
head(20)
stopifnot(sum(is.na(jur2$propaddress)) == nrow(filter(jur,
is.na(propaddress) | is.na(prophouseno))))
jur2 <- jur2 %>%
classify_addresses()
count(jur2, address_type)
if (TRUE %in% is.na(jur2$address_type)) {
warning("NAs in address_type")
}
jur2 <- jur2 %>%
mutate(address_type = ifelse(category_detail %in% c("townhouse", "sf attached"),
"single",
address_type))
multiples <- jur2 %>%
filter(address_type == "multiple")
singles <- jur2 %>%
filter(address_type == "single")
missing <- jur2 %>%
filter(address_type == "missing")
multiples <- multiples %>%
group_by(propaddress) %>%
fill(zoning) %>%
fill(zoning, .direction = "up") %>%
ungroup()
v <- tibble::tibble(variable = c("zoning",
"lotsize_sf",
"buildingarea",
"countylandusedescription",
"residential",
"category",
"category_detail",
"building_type",
"yearbuilt",
"long",
"lat"),
operation = c("mode",
"conditional based on values",
"sum",
"mode",
"max",
"mode",
"mode",
"mode",
"max",
"median",
"median"),
`in case of tie` = c("take most dense zoning code (?)",
"",
"",
"case-by-case basis",
"residential",
"case-by-case basis",
"case-by-case basis",
"case-by-case basis",
"take maxiumum year- accounts for renovation",
"median longitude and latitude ensures this is a correct pairing, falls within the address",
"median longitude and latitude ensures this is a correct pairing, falls within the address"))
knitr::kable(v)
nested <- multiples %>%
group_by(propaddress, parcel_address) %>%
summarize_at(vars(zoning,lotsize_sf,
buildingarea, countylandusedescription,
residential, category, category_detail, building_type,
yearbuilt, long, lat), list) %>%
rename_at(vars(-propaddress, -parcel_address), ~ paste0(., "_list")) %>%
mutate(nprops = map(zoning_list, length),
zoning = map(zoning_list, Mode),
lotsize_sf_sum = map_dbl(lotsize_sf_list, sum, na.rm = TRUE),
buildingarea = map_dbl(buildingarea_list, sum, na.rm = TRUE),
countylandusedescription = map(countylandusedescription_list, Mode),
residential = map(residential_list, max, na.rm = FALSE),
category = map(category_list, Mode),
category_detail = map(category_detail_list, Mode),
building_type = ifelse(category == "MF",
map(building_type_list, Mode),
NA),
long = map(long_list, median),
lat = map(lat_list, median),
# year built handled differently due to missing values
yearbuilt_list = ifelse(as.integer(map(yearbuilt_list, function(x) sum(!is.na(x)))) == 0,
NA,
yearbuilt_list),
yearbuilt = ifelse(!is.na(yearbuilt_list),
map(yearbuilt_list, max, na.rm = TRUE),
NA))
weird <- tibble(propaddress = c( "1330 S FAIR ST", "1633 N COLONIAL TER", "1117 N VERMONT ST", "1134 N STUART ST", "1300 N MEADE ST"),
instance = 1:5)
weird1 <- nested %>%
filter(propaddress %in% weird$propaddress) %>%
left_join(weird, by = "propaddress") %>%
select(instance, propaddress, nprops, lotsize_sf_list, lotsize_sf_sum) %>%
arrange(instance)
knitr::kable(weird1)
rm(weird, weird1)
nested1 <- nested %>%
mutate(nprops = as.integer(nprops),
lotsize_sf_sum = as.integer(lotsize_sf_sum),
unique_lots = map(lotsize_sf_list, function(x) length(unique(x))),
lsfirst = map(lotsize_sf_list, function(x) x[1]),
lsmode = ifelse(lotsize_sf_sum == 0,
NA,
map(lotsize_sf_list, Mode, na.rm = TRUE))
) %>%
ungroup()
nested1 <- nested1 %>%
mutate(fxn = case_when(
lotsize_sf_sum < 1 ~ "missing",
nprops == unique_lots ~ "sum",
unique_lots == 1 ~ "first",
TRUE ~ "other"
))
nested1 %>% count(fxn)
nested_done <- nested1 %>%
filter(fxn != "other")
nested_other <- nested1 %>%
filter(fxn == "other") %>%
mutate(lsmode_num = ifelse(map(lsmode, length) > 1, NA, lsmode),
lsmode_num = as.integer(lsmode_num),
fxn = case_when(
nprops > 500 ~ "missing",
lsmode_num > 8000 ~ "mode",
TRUE ~ "sum"
))
count(nested_other, fxn)
nested_all <- bind_rows(nested_done, nested_other) %>%
mutate_at(vars(lotsize_sf_sum, lsfirst, lsmode_num), as.double) %>%
mutate(lotsize_sf_final =
case_when(fxn == "first" ~ lsfirst,
fxn == "sum" ~ lotsize_sf_sum,
fxn == "mode" ~ lsmode_num))
cdties <- nested_all %>%
filter(map(category_detail, length) > 1)
cdties %>%
mutate(category_detail_chr = as.character(category_detail)) %>%
group_by(category_detail_chr) %>%
count() %>%
arrange(desc(n))
cdties <- cdties %>%
mutate(test_vacant = as.integer(map(category_detail,
~ sum(str_detect(., "vacant")))))
filter(nested_all, map(category_detail, length) <= 1),
nested_final <- bind_rows(
filter(nested_all, map(category_detail, length) <= 1),
novac, bothvac, onevac) %>%
select(-test_vacant)
novac <- cdties %>%
filter(test_vacant == 0) %>%
mutate(test_res1 = map(residential_list, 1),
test_res2 = map(residential_list, 2)) %>%
mutate(argnum = case_when(test_res1 == 1 ~ 1,
test_res2 == 1 ~ 2,
TRUE ~ 1)) %>%
mutate(category = ifelse(argnum == 1,
map(category_list, 1),
map(category_list, 2)),
category_detail = ifelse(argnum == 1,
map(category_detail_list, 1),
map(category_detail_list, 2)),
building_type = ifelse(argnum == 1,
map(building_type_list, 1),
map(building_type_list, 2)),
countylandusedescription = ifelse(argnum == 1,
map(countylandusedescription_list, 1),
map(countylandusedescription_list, 2))) %>%
select(-test_res1, -test_res2, argnum)
onevac <- cdties %>%
filter(test_vacant == 1) %>%
mutate(vac1 = str_detect(map(category_detail_list, 1), "vacant")) %>%
mutate(category = ifelse(vac1 == FALSE,
map(category_list, 1),
map(category_list, 2)),
category_detail = ifelse(vac1 == FALSE,
map(category_detail_list, 1),
map(category_detail_list, 2)),
building_type = ifelse(vac1 == FALSE,
map(building_type_list, 1),
map(building_type_list, 2)),
countylandusedescription = ifelse(vac1 == FALSE,
map(countylandusedescription_list, 1),
map(countylandusedescription_list, 2))) %>%
mutate(nprops = 1) %>%
select(-vac1)
bothvac <- cdties %>%
filter(test_vacant == 2) %>%
mutate(countylandusedescription = map(countylandusedescription, 1),
category_detail = map(category_detail, 1))
filter(nested_all, map(category_detail, length) <= 1),
nested_final <- bind_rows(
filter(nested_all, map(category_detail, length) <= 1),
novac, bothvac, onevac) %>%
select(-test_vacant)
onevac <- cdties %>%
filter(test_vacant == 1) %>%
mutate(vac1 = str_detect(map(category_detail_list, 1), "vacant")) %>%
mutate(category = ifelse(vac1 == FALSE,
map(category_list, 1),
map(category_list, 2)),
category_detail = ifelse(vac1 == FALSE,
map(category_detail_list, 1),
map(category_detail_list, 2)),
building_type = ifelse(vac1 == FALSE,
map(building_type_list, 1),
map(building_type_list, 2)),
countylandusedescription = ifelse(vac1 == FALSE,
map(countylandusedescription_list, 1),
map(countylandusedescription_list, 2))) %>%
mutate(nprops = 1,
vacant_flag == 1) %>%
select(-vac1)
onevac <- cdties %>%
filter(test_vacant == 1) %>%
mutate(vac1 = str_detect(map(category_detail_list, 1), "vacant")) %>%
mutate(category = ifelse(vac1 == FALSE,
map(category_list, 1),
map(category_list, 2)),
category_detail = ifelse(vac1 == FALSE,
map(category_detail_list, 1),
map(category_detail_list, 2)),
building_type = ifelse(vac1 == FALSE,
map(building_type_list, 1),
map(building_type_list, 2)),
countylandusedescription = ifelse(vac1 == FALSE,
map(countylandusedescription_list, 1),
map(countylandusedescription_list, 2))) %>%
mutate(nprops = 1,
vacant_flag = 1) %>%
select(-vac1)
filter(nested_all, map(category_detail, length) <= 1),
nested_final <- bind_rows(
filter(nested_all, map(category_detail, length) <= 1),
novac, bothvac, onevac) %>%
select(-test_vacant)
nrow(filter(cdties, test_vacant == 1))
stopifnot(mult + nrow(other) == nrow(jur) - nrow(filter(cdties, test_vacant == 1)))
mult + nrow(other)
mult <- finaljur %>%
filter(address_type == "multiple") %>%
summarize(num = sum(numberofunits)) %>%
pull()
other <- finaljur %>%
filter(address_type != "multiple")
mult + nrow(other)
nrow(jur) - nrow(filter(cdties, test_vacant == 1
nrow(jur) - nrow(filter(cdties, test_vacant == 1)
nrow(jur) - nrow(filter(cdties, test_vacant == 1))
# this value will be used later to check the number of rows
nunits <- cdties %>% filter(test_vacant == 1) %>% summarize(sum(nprops))
# this value will be used later to check the number of rows
nunits <- cdties %>% filter(test_vacant == 1) %>% summarize(sum(nprops)) %>% pull()
stopifnot(mult + nrow(other) == nrow(jur) - (nunits - nrow(filter(cdties, test_vacant == 1))))
stopifnot(mult + nrow(other) == nrow(jur) -
(nunits - nrow(filter(cdties, test_vacant == 1))))
stopifnot(mult + nrow(other) == nrow(jur) -
(nunits - nrow(filter(cdties, test_vacant == 1))))
stopifnot(sum(is.na(jur$propaddress)) == nrow(filter(jur,
is.na(propaddress) | is.na(prophouseno))))
count(cdties, test_vacant) %>%
rename(`Number of vacant categories` = test_vacant,
`Number of instances` = n) %>%
mutate(`What to do?` = c("Take the residential code",
"Take the non-vacant categoty",
"Pick the more general vacant category")) %>%
knitr::kable()
