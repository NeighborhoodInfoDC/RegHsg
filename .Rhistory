mult_grouped <- multiples %>%
# take out properties wihtout address or street number
filter(!is.na(propaddress),
!is.na(prophouseno)) %>%
group_by(propaddress, zoning) %>%
count()
View(mult_grouped)
mult_grouped <- multiples %>%
# take out properties without address or street number
filter(!is.na(propaddress),
!is.na(prophouseno)) %>%
group_by(propaddress, zoning) %>%
count() %>% group_by(n)
View(mult_grouped)
mult_grouped <- multiples %>%
# take out properties without address or street number
filter(!is.na(propaddress),
!is.na(prophouseno)) %>%
group_by(propaddress, zoning) %>%
count() %>% group_by(n) %>% count()
View(mult_grouped)
mult_grouped <- multiples %>%
# take out properties without address or street number
filter(!is.na(propaddress),
!is.na(prophouseno)) %>%
group_by(propaddress, zoning) %>%
count() %>% group_by(propaddress, n) %>% count()
View(mult_grouped)
count(mult_grouped, nn)
View(mult_grouped)
count(mult_grouped, nn == 1)
mult_grouped <- multiples %>%
# take out properties without address or street number
filter(!is.na(propaddress),
!is.na(prophouseno)) %>%
group_by(propaddress, zoning) %>%
count() %>% group_by(propaddress, n) %>% count() %>% ungroup()
count(mult_grouped, nn == 1)
count(mult_grouped, nn)
View(mult_grouped)
mult_grouped <- multiples %>%
# take out properties without address or street number
filter(!is.na(propaddress),
!is.na(prophouseno)) %>%
group_by(propaddress) %>%
count()
mult_grouped <- multiples %>%
# take out properties without address or street number
filter(!is.na(propaddress),
!is.na(prophouseno)) %>%
group_by(propaddress) %>%
count()
mult_grouped <- multiples %>%
# take out properties without address or street number
filter(!is.na(propaddress),
!is.na(prophouseno)) %>%
group_by(propaddress, zoning) %>%
count()
multiples %>%
tibble(a = c(a, a, a, b, b),
b = c(1, NA, 1, NA, 2)) %>%
fill(b)
tibble(a = c(a, a, a, b, b),
b = c(1, NA, 1, NA, 2))
multiples %>%
tibble(a = c("a", "a", "a", "b", "b"),
b = c(1, NA, 1, NA, 2)) %>%
fill(b)
tibble(a = c("a", "a", "a", "b", "b"),
b = c(1, NA, 1, NA, 2))
multiples %>%
boom <- tibble(a = c("a", "a", "a", "b", "b"),
b = c(1, NA, 1, NA, 2))
multiples %>%
boom <- tibble(a = c("a", "a", "a", "b", "b"),
b = c(1, NA, 1, NA, 2))
boom <- tibble(a = c("a", "a", "a", "b", "b"),
b = c(1, NA, 1, NA, 2))
fill(boom, b)
boom %>%
group_by(a) %>%
fill(b)
boom %>%
group_by(a) %>%
fill(b) %>%
fill(b, direction = "up")
fill
boom %>%
group_by(a) %>%
fill(b) %>%
fill(b, .direction = "up")
?mode
mode(boom$a)
mode(boom$b)
install.packages("DescTools")
library(DescTools)
Mode(boom$a)
Mode(boom$b)
?Mode
boom <- tibble(a = c("a", "a", "a", "b", "b", "b"),
b = c(1, NA, 1, NA, 2, 2))
Mode(boom$a)
Mode(boom$b)
View(arl_mult)
library(tidyverse)
library(DescTools)
source("Macros/read-bk.R")
source("Macros/filter-bk.R")
source("Macros/select-vars.R")
source("Macros/sample-properties.R")
source("Macros/collapse-properties.R")
source("Macros/read-bk.R")
source("Macros/filter-bk.R")
source("Macros/select-vars.R")
source("Macros/sample-properties.R")
source("Macros/collapse-properties.R")
region <- read_bk("dc-cog-assessment_20181228.csv")
currentjur <- region %>%
filter_bk(fips = "51013") %>%
select_vars()
get_single_properties <- function(dataset) {
addresses <- dataset %>%
group_by(propaddress) %>%
count() %>% filter(n == 1) %>%
pull(propaddress)
dataset %>%
filter(propaddress %in% addresses,
!is.na(prophouseno, propaddress))
}
get_single_properties <- function(dataset) {
addresses <- dataset %>%
group_by(propaddress) %>%
count() %>% filter(n == 1) %>%
pull(propaddress)
dataset %>%
filter(propaddress %in% addresses,
!is.na(prophouseno),
!is.na(propaddress))
}
get_multiple_properties <- function(dataset) {
addresses <- dataset %>%
group_by(propaddress) %>%
count() %>% filter(n > 1) %>%
pull(propaddress)
dataset %>%
filter(propaddress %in% addresses,
!is.na(prophouseno),
!is.na(propaddress))
}
get_missing_address <- function(dataset) {
dataset %>%
filter(is.na(prophouseno),
is.na(propaddress))
}
check_classification <- function(dataset,
single_data = singles,
multiple_data = multiples) {
if (nrow(dataset) != nrow(single_data) + nrow(multiple_data)
+ nrow(missing_address)) {
warning("error in single/multiple classification")
} else { print("singles and multiples add to total")
}
}
get_missing_address <- function(dataset) {
dataset %>%
filter(is.na(prophouseno),
is.na(propaddress))
}
check_classification <- function(dataset,
single_data = singles,
multiple_data = multiples,
missing_data = missing_address) {
if (nrow(dataset) != nrow(single_data) + nrow(multiple_data)
+ nrow(missing_address)) {
warning("error in single/multiple classification")
} else { print("singles and multiples add to total")
}
}
check_classification <- function(dataset,
single_data = singles,
multiple_data = multiples,
missing_data = missing_address) {
if (nrow(dataset) != nrow(single_data) + nrow(multiple_data)
+ nrow(missing_address)) {
warning("error in single/multiple/missing classification")
} else { print("singles, multiples, and missing add to total")
}
}
check_classification <- function(dataset,
single_data = singles,
multiple_data = multiples,
missing_data = missing_address) {
if (nrow(dataset) != nrow(single_data) + nrow(multiple_data)
+ nrow(missing_data)) {
warning("error in single/multiple/missing classification")
} else { print("singles, multiples, and missing add to total")
}
}
singles <- get_single_properties(currentjur_cat)
multiples <- get_multiple_properties(currentjur_cat)
missing_address <- get_missing_address(currentjur_cat)
# recode variables
res_codes <-
c("AFFORDABLE DWELLING UNIT",
"APARTMENT - GARDEN",
"APARTMENT - HIGH-RISE",
"APARTMENT - MID-RISE",
"APARTMENT - PARKING",
"COMMUNITY BENEFIT UNIT",
"MULTI-FAM IMPR/NO SITE PLAN",
"MULTI-FAM IMPR/SITE PLAN",
"MULTI-FAM VACANT/NO SITE PLAN",
"MULTI-FAM VACANT/SITE PLAN",
"NOT VALUED CONDO HOA",
"NOT VALUED COSTED - HOA/SITE PLAN",
"RESIDENTIAL COST-VAL - DUPLEX",
"RESIDENTIAL COST-VAL - IMPR/SF & TW",
"RESIDENTIAL COST-VAL - SIDE BY SIDE",
"RESIDENTIAL COST-VAL - SINGLE-FAM DET",
"RESIDENTIAL COST-VAL - TOWNHOUSE/CO",
"RESIDENTIAL COST-VAL - TOWNHOUSE/FSO",
"RESIDENTIAL COST-VAL - VAC/SF & TW",
"SALES APPR CONDO/CO-OP",
"SALES APPR CONDO/GARDEN",
"SALES APPR CONDO/HIGH RISE",
"SALES APPR CONDO/MID RISE",
"SALES APPR CONDO/STACKED",
"SFD - APT ZONED/NO SITE PLAN",
"SFD - APT ZONED/SITE PLAN",
"VACANT RESIDENTIAL")
currentjur_cat <- currentjur %>%
mutate(residential =
ifelse(countylandusedescription %in% res_codes, 1, 0),
category = case_when(
countylandusedescription %in%
c("COMMERCIAL CONDO",
"GEN COMM-IND - AUTO DEALERSHIP",
"GEN COMM-IND - SELF-STORAGE",
"GEN COMM-IND - SERVICE STATION",
"GEN COMM-IND - WAREHOUSE",
"GEN COMM - BANK",
"GEN COMM - FAST FOOD",
"GEN COMM - HEALTH CARE FACILITY",
"GEN COMM - MIXED OFFICE/COMM",
"GEN COMM - NEIGHBORHOOD CTR",
"GEN COMM - OTHER",
"GEN COMM - REST/EATING FACILITY",
"GEN COMM - RETAIL/STRIP",
"GEN COMM - SMALL OFFICE",
"GEN COMM IMPR-LAND/NO SITE PLAN",
"GEN COMM IMPR-LAND/SITE PLAN",
"GEN COMM/PARKING",
"HOTEL - FULL SERVICE",
"HOTEL - LAND/OTHER",
"HOTEL - LIMITED SERVICE",
"HOTEL - LODGING",
"HOTEL - SELECT DRIVE",
"HOTEL RESIDENCE SUITES",
"MIXED USE",
"SFD - COMM ZONED/NO SITE PLAN",
"SFD - COMM ZONED/SITE PLAN") ~ "commercial",
countylandusedescription %in%
c("AFFORDABLE DWELLING UNIT",
"APARTMENT - GARDEN",
"APARTMENT - HIGH-RISE",
"APARTMENT - MID-RISE",
"APARTMENT - PARKING",
"COMMUNITY BENEFIT UNIT",
"MULTI-FAM IMPR/NO SITE PLAN",
"MULTI-FAM IMPR/SITE PLAN",
"NOT VALUED CONDO HOA",
"RESIDENTIAL COST-VAL - DUPLEX",
"SALES APPR CONDO/CO-OP",
"SALES APPR CONDO/GARDEN",
"SALES APPR CONDO/HIGH RISE",
"SALES APPR CONDO/MID RISE",
"SALES APPR CONDO/STACKED",
"SFD - APT ZONED/NO SITE PLAN",
"SFD - APT ZONED/SITE PLAN") ~ "mf",
countylandusedescription %in%
c("OFFICE BLDG IMPR-LAND/SITE PLAN",
"OFFICE BLDG/7 OR MORE STORIES",
"OFFICE BLDG/PARKING",
"OFFICE BLDG/UNDER 7 STORIES") ~ "office",
countylandusedescription %in%
c("NOT VALUED COSTED - HOA/SITE PLAN",
"RESIDENTIAL COST-VAL - IMPR/SF & TW",
"RESIDENTIAL COST-VAL - SIDE BY SIDE",
"RESIDENTIAL COST-VAL - SINGLE-FAM DET",
"RESIDENTIAL COST-VAL - TOWNHOUSE/CO",
"RESIDENTIAL COST-VAL - TOWNHOUSE/FSO") ~ "sf",
countylandusedescription %in%
c("MULTI-FAM VACANT/NO SITE PLAN",
"MULTI-FAM VACANT/SITE PLAN",
"RESIDENTIAL COST-VAL - VAC/SF & TW",
"VACANT RESIDENTIAL",
"GEN COMM VAC-LAND/NO SITE PLAN",
"GEN COMM VAC-LAND/SITE PLAN",
"OFFICE BLDG VAC-LAND/NO SITE PLAN",
"OFFICE BLDG VAC-LAND/SITE PLAN",
"VACANT COMMERCIAL",
"VACANT EXEMPT",
"VACANT LIGHT INDUSTRIAL",
"VACANT OFFICE") ~ "vacant"),
category_detail = case_when(
countylandusedescription %in%
c("AFFORDABLE DWELLING UNIT",
"APARTMENT - GARDEN",
"APARTMENT - HIGH-RISE",
"APARTMENT - MID-RISE",
"APARTMENT - PARKING",
"COMMUNITY BENEFIT UNIT",
"MULTI-FAM IMPR/NO SITE PLAN",
"MULTI-FAM IMPR/SITE PLAN",
"SFD - APT ZONED/NO SITE PLAN",
"SFD - APT ZONED/SITE PLAN") ~ "apartment",
countylandusedescription %in%
c("COMMERCIAL CONDO",
"GEN COMM-IND - AUTO DEALERSHIP",
"GEN COMM-IND - SELF-STORAGE",
"GEN COMM-IND - SERVICE STATION",
"GEN COMM-IND - WAREHOUSE",
"GEN COMM - BANK",
"GEN COMM - FAST FOOD",
"GEN COMM - HEALTH CARE FACILITY",
"GEN COMM - MIXED OFFICE/COMM",
"GEN COMM - NEIGHBORHOOD CTR",
"GEN COMM - OTHER",
"GEN COMM - REST/EATING FACILITY",
"GEN COMM - RETAIL/STRIP",
"GEN COMM - SMALL OFFICE",
"GEN COMM IMPR-LAND/NO SITE PLAN",
"GEN COMM IMPR-LAND/SITE PLAN",
"GEN COMM/PARKING",
"HOTEL - FULL SERVICE",
"HOTEL - LAND/OTHER",
"HOTEL - LIMITED SERVICE",
"HOTEL - LODGING",
"HOTEL - SELECT DRIVE",
"HOTEL RESIDENCE SUITES",
"MIXED USE",
"SFD - COMM ZONED/NO SITE PLAN",
"SFD - COMM ZONED/SITE PLAN") ~ "commercial",
countylandusedescription %in%
c("NOT VALUED CONDO HOA",
"SALES APPR CONDO/CO-OP",
"SALES APPR CONDO/GARDEN",
"SALES APPR CONDO/HIGH RISE",
"SALES APPR CONDO/MID RISE",
"SALES APPR CONDO/STACKED") ~ "condo",
countylandusedescription %in%
c("RESIDENTIAL COST-VAL - DUPLEX") ~ "duplex",
countylandusedescription %in%
c("OFFICE BLDG IMPR-LAND/SITE PLAN",
"OFFICE BLDG/7 OR MORE STORIES",
"OFFICE BLDG/PARKING",
"OFFICE BLDG/UNDER 7 STORIES") ~ "office",
countylandusedescription %in%
c("RESIDENTIAL COST-VAL - SIDE BY SIDE") ~ "sf attached",
countylandusedescription %in%
c("NOT VALUED COSTED - HOA/SITE PLAN",
"RESIDENTIAL COST-VAL - IMPR/SF & TW",
"RESIDENTIAL COST-VAL - SINGLE-FAM DET") ~ "sf detached",
countylandusedescription %in%
c("RESIDENTIAL COST-VAL - TOWNHOUSE/CO",
"RESIDENTIAL COST-VAL - TOWNHOUSE/FSO") ~ "townhouse",
countylandusedescription %in%
c("GEN COMM VAC-LAND/NO SITE PLAN",
"GEN COMM VAC-LAND/SITE PLAN",
"VACANT COMMERCIAL") ~ "vacant commercial",
countylandusedescription %in%
c("VACANT EXEMPT") ~ "Vacant exempt",
countylandusedescription %in%
c("VACANT LIGHT INDUSTRIAL") ~ "vacant light industrial",
countylandusedescription %in%
c("MULTI-FAM VACANT/NO SITE PLAN",
"MULTI-FAM VACANT/SITE PLAN") ~ "vacant mf",
countylandusedescription %in%
c("OFFICE BLDG VAC-LAND/NO SITE PLAN",
"OFFICE BLDG VAC-LAND/SITE PLAN",
"VACANT OFFICE") ~ "vacant office",
countylandusedescription %in%
c("VACANT RESIDENTIAL") ~ "vacant residential",
countylandusedescription %in%
c("RESIDENTIAL COST-VAL - VAC/SF & TW") ~ "vacant sf")
)
count(currentjur_cat, residential)
count(currentjur_cat, is.na(residential))
count(currentjur_cat, category)
count(currentjur_cat, is.na(category))
count(currentjur_cat, category_detail)
count(currentjur_cat, is.na(category_detail))
singles <- get_single_properties(currentjur_cat)
multiples <- get_multiple_properties(currentjur_cat)
missing_address <- get_missing_address(currentjur_cat)
check_classification(currentjur_cat)
dataset %>%
filter(is.na(prophouseno) |
is.na(propaddress))
get_missing_address <- function(dataset) {
dataset %>%
filter(is.na(prophouseno) |
is.na(propaddress))
}
missing_address <- get_missing_address(currentjur_cat)
check_classification(currentjur_cat)
# first- fill in missing zoning
multiples <- multiples %>%
group_by(propaddress) %>%
fill(zoning) %>%
fill(zoning, .direction = "up")
View(multiples)
# check
mult_grouped <- multiples %>%
group_by(propaddress, zoning) %>%
count()
View(mult_grouped)
# take most common zoning variable, categorization
# sum building areas and
multiples_vars <- multiples %>%
group_by(propaddress) %>%
summarize(number_records = n(),
lotsize = sum(lotsizeorarea),
buildingsize = sum(buildingarea),
countylandusedescription = Mode(countylandusedescription),
zoning = Mode(countylandusedescription),
residential = Mode(residential),
category = Mode(category),
category_detail = Mode(category_detail),
lat = median(lat),
long = median(long),
built = max(yearbuilt))
# take most common zoning variable, categorization
# sum building areas and
multiples_vars <- multiples %>%
group_by(propaddress) %>%
summarize(number_records = n(),
lotsize = sum(lotsizeorarea),
buildingsize = sum(buildingarea),
countylanduse = Mode(countylandusedescription),
zoning = Mode(countylandusedescription),
residential = Mode(residential),
category = Mode(category),
category_detail = Mode(category_detail),
lat = median(lat),
long = median(long),
built = max(yearbuilt))
# take most common zoning variable, categorization
# sum building areas and
nested <- multiples %>%
group_by(propaddress) %>%
nest()
View(nested)
# take most common zoning variable, categorization
# sum building areas and
nested <- multiples %>%
group_by(propaddress) %>%
nest(zoning)
View(nested)
# take most common zoning variable, categorization
# sum building areas and
nested <- multiples %>%
group_by(propaddress) %>%
summarize(zoning1 = nest(zoning))
# take most common zoning variable, categorization
# sum building areas and
nested <- multiples %>%
group_by(propaddress) %>%
summarize(zoning1 = nest(.$zoning))
?nest
# take most common zoning variable, categorization
# sum building areas and
nested <- multiples %>%
group_by(propaddress) %>%
nest(~zoning)
# take most common zoning variable, categorization
# sum building areas and
nested <- multiples %>%
group_by(propaddress) %>%
nest(-zoning)
View(nested)
# take most common zoning variable, categorization
# sum building areas and
nested <- multiples %>%
group_by(propaddress) %>%
nest(zoning)
# take most common zoning variable, categorization
# sum building areas and
nested <- multiples %>%
group_by(propaddress) %>%
nest(zoning, .key = "zoning")
currentjur_cat %>% group_by(zoning) %>% count() %>% arrange(desc(n))
currentjur_cat %>% group_by(zoning) %>% count() %>% arrange(desc(n)) %>%
write_csv(paste0(filepath, "-zoning.csv"))
currentfips <- "51013"
filepath <- "arlington"
currentjur_cat %>% group_by(zoning) %>% count() %>% arrange(desc(n)) %>%
write_csv(paste0(filepath, "-zoning.csv"))
currentjur_cat %>% group_by(zoning) %>% count() %>% arrange(desc(n)) %>%
write_csv(paste0("Data/", filepath, "-zoning.csv"))
# take most common zoning variable, categorization
# sum building areas and
nested <- multiples %>%
group_by(propaddress) %>%
summarize(zoning = list(zoning))
View(nested)
multiples_vars <- nested %>%
mutate(zoning2 = Mode(zoning))
library(purrr)
multiples_vars <- nested %>%
mutate(zoning2 = map(zoning, Mode))
View(multiples_vars)
