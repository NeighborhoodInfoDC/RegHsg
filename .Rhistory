"GEN COMM - FAST FOOD",
"GEN COMM - HEALTH CARE FACILITY",
"GEN COMM - MIXED OFFICE/COMM",
"GEN COMM - NEIGHBORHOOD CTR",
"GEN COMM - OTHER",
"GEN COMM - REST/EATING FACILITY",
"GEN COMM - RETAIL/STRIP",
"GEN COMM - SMALL OFFICE",
"GEN COMM IMPR-LAND/NO SITE PLAN",
"GEN COMM IMPR-LAND/SITE PLAN",
"GEN COMM/PARKING",
"HOTEL - FULL SERVICE",
"HOTEL - LAND/OTHER",
"HOTEL - LIMITED SERVICE",
"HOTEL - LODGING",
"HOTEL - SELECT DRIVE",
"HOTEL RESIDENCE SUITES",
"MIXED USE",
"SFD - COMM ZONED/NO SITE PLAN",
"SFD - COMM ZONED/SITE PLAN") ~ "commercial",
countylandusedescription %in%
c("NOT VALUED CONDO HOA",
"SALES APPR CONDO/CO-OP",
"SALES APPR CONDO/GARDEN",
"SALES APPR CONDO/HIGH RISE",
"SALES APPR CONDO/MID RISE",
"SALES APPR CONDO/STACKED") ~ "condo",
countylandusedescription %in%
c("RESIDENTIAL COST-VAL - DUPLEX") ~ "duplex",
countylandusedescription %in%
c("OFFICE BLDG IMPR-LAND/SITE PLAN",
"OFFICE BLDG/7 OR MORE STORIES",
"OFFICE BLDG/PARKING",
"OFFICE BLDG/UNDER 7 STORIES") ~ "office",
countylandusedescription %in%
c("RESIDENTIAL COST-VAL - SIDE BY SIDE") ~ "sf attached",
countylandusedescription %in%
c("NOT VALUED COSTED - HOA/SITE PLAN",
"RESIDENTIAL COST-VAL - IMPR/SF & TW",
"RESIDENTIAL COST-VAL - SINGLE-FAM DET") ~ "sf detached",
countylandusedescription %in%
c("RESIDENTIAL COST-VAL - TOWNHOUSE/CO",
"RESIDENTIAL COST-VAL - TOWNHOUSE/FSO") ~ "townhouse",
countylandusedescription %in%
c("GEN COMM VAC-LAND/NO SITE PLAN",
"GEN COMM VAC-LAND/SITE PLAN",
"VACANT COMMERCIAL") ~ "vacant commercial",
countylandusedescription %in%
c("VACANT EXEMPT") ~ "Vacant exempt",
countylandusedescription %in%
c("VACANT LIGHT INDUSTRIAL") ~ "vacant light industrial",
countylandusedescription %in%
c("MULTI-FAM VACANT/NO SITE PLAN",
"MULTI-FAM VACANT/SITE PLAN") ~ "vacant mf",
countylandusedescription %in%
c("OFFICE BLDG VAC-LAND/NO SITE PLAN",
"OFFICE BLDG VAC-LAND/SITE PLAN",
"VACANT OFFICE") ~ "vacant office",
countylandusedescription %in%
c("VACANT RESIDENTIAL") ~ "vacant residential",
countylandusedescription %in%
c("RESIDENTIAL COST-VAL - VAC/SF & TW") ~ "vacant sf")
)
count(arlington1, residential)
count(arlington1, is.na(residential))
count(arlington1, category)
count(arlington1, is.na(category))
count(arlington1, category_detail)
count(arlington1, is.na(category_detail))
# identify properties with more than one observation
singles <- arlington1 %>%
group_by(propaddress) %>%
count() %>% filter(n == 1)
select_vars <- function(dataset) {
dataset %>% select(county_fips, county_name,
standardizedlandusecode, codedescription,
bkfsinternalpid,
assessorsparcelnumberapnpin,
duplicateapn,
propaddress = propertyfullstreetaddress,
propcity = propertycityname,
propstate = propertystate,
propzip = propertyzipcode,
propzip4 = propertyzip4,
propunittype = propertyunittype,
propunitno = propertyunitnumber,
prophouseno = propertyhousenumber,
propstreetname = propertystreetname,
propstreetsuffix = propertystreetsuffix,
lat = propertyaddresslatitiude,
long = propertyaddresslongitude,
tract = propertyaddresscensustract,
taxaccountnumber,
owneroccupiedresidential,
assessedlandvalue,
assessedimprovementvalue,
totalassessedvalue,
assessmentyear,
countylandusedescription,
countylandusecode,
zoning,
lotsizeorarea,
lotsizeareaunit,
originallotsizeorarea,
buildingarea,
yearbuilt,
noofbuildings,
noofstories,
totalnumberofrooms,
numberofunits,
numberofbedrooms,
marketvalueland,
marketvalueimprovement,
totalmarketvalue,
marketvalueyear,
buildingclass,
lotsizesquarefeet,
floorcover,
lotsizeacres,
condoprojectbldgname
)
}
arlington <- region %>%
filter_bk(fips = "51013") %>%
select_vars()
arlington1 <- arlington %>%
mutate(residential =
ifelse(countylandusedescription %in% res_codes, 1, 0),
category = case_when(
countylandusedescription %in%
c("COMMERCIAL CONDO",
"GEN COMM-IND - AUTO DEALERSHIP",
"GEN COMM-IND - SELF-STORAGE",
"GEN COMM-IND - SERVICE STATION",
"GEN COMM-IND - WAREHOUSE",
"GEN COMM - BANK",
"GEN COMM - FAST FOOD",
"GEN COMM - HEALTH CARE FACILITY",
"GEN COMM - MIXED OFFICE/COMM",
"GEN COMM - NEIGHBORHOOD CTR",
"GEN COMM - OTHER",
"GEN COMM - REST/EATING FACILITY",
"GEN COMM - RETAIL/STRIP",
"GEN COMM - SMALL OFFICE",
"GEN COMM IMPR-LAND/NO SITE PLAN",
"GEN COMM IMPR-LAND/SITE PLAN",
"GEN COMM/PARKING",
"HOTEL - FULL SERVICE",
"HOTEL - LAND/OTHER",
"HOTEL - LIMITED SERVICE",
"HOTEL - LODGING",
"HOTEL - SELECT DRIVE",
"HOTEL RESIDENCE SUITES",
"MIXED USE",
"SFD - COMM ZONED/NO SITE PLAN",
"SFD - COMM ZONED/SITE PLAN") ~ "commercial",
countylandusedescription %in%
c("AFFORDABLE DWELLING UNIT",
"APARTMENT - GARDEN",
"APARTMENT - HIGH-RISE",
"APARTMENT - MID-RISE",
"APARTMENT - PARKING",
"COMMUNITY BENEFIT UNIT",
"MULTI-FAM IMPR/NO SITE PLAN",
"MULTI-FAM IMPR/SITE PLAN",
"NOT VALUED CONDO HOA",
"RESIDENTIAL COST-VAL - DUPLEX",
"SALES APPR CONDO/CO-OP",
"SALES APPR CONDO/GARDEN",
"SALES APPR CONDO/HIGH RISE",
"SALES APPR CONDO/MID RISE",
"SALES APPR CONDO/STACKED",
"SFD - APT ZONED/NO SITE PLAN",
"SFD - APT ZONED/SITE PLAN") ~ "mf",
countylandusedescription %in%
c("OFFICE BLDG IMPR-LAND/SITE PLAN",
"OFFICE BLDG/7 OR MORE STORIES",
"OFFICE BLDG/PARKING",
"OFFICE BLDG/UNDER 7 STORIES") ~ "office",
countylandusedescription %in%
c("NOT VALUED COSTED - HOA/SITE PLAN",
"RESIDENTIAL COST-VAL - IMPR/SF & TW",
"RESIDENTIAL COST-VAL - SIDE BY SIDE",
"RESIDENTIAL COST-VAL - SINGLE-FAM DET",
"RESIDENTIAL COST-VAL - TOWNHOUSE/CO",
"RESIDENTIAL COST-VAL - TOWNHOUSE/FSO") ~ "sf",
countylandusedescription %in%
c("MULTI-FAM VACANT/NO SITE PLAN",
"MULTI-FAM VACANT/SITE PLAN",
"RESIDENTIAL COST-VAL - VAC/SF & TW",
"VACANT RESIDENTIAL",
"GEN COMM VAC-LAND/NO SITE PLAN",
"GEN COMM VAC-LAND/SITE PLAN",
"OFFICE BLDG VAC-LAND/NO SITE PLAN",
"OFFICE BLDG VAC-LAND/SITE PLAN",
"VACANT COMMERCIAL",
"VACANT EXEMPT",
"VACANT LIGHT INDUSTRIAL",
"VACANT OFFICE") ~ "vacant"),
category_detail = case_when(
countylandusedescription %in%
c("AFFORDABLE DWELLING UNIT",
"APARTMENT - GARDEN",
"APARTMENT - HIGH-RISE",
"APARTMENT - MID-RISE",
"APARTMENT - PARKING",
"COMMUNITY BENEFIT UNIT",
"MULTI-FAM IMPR/NO SITE PLAN",
"MULTI-FAM IMPR/SITE PLAN",
"SFD - APT ZONED/NO SITE PLAN",
"SFD - APT ZONED/SITE PLAN") ~ "apartment",
countylandusedescription %in%
c("COMMERCIAL CONDO",
"GEN COMM-IND - AUTO DEALERSHIP",
"GEN COMM-IND - SELF-STORAGE",
"GEN COMM-IND - SERVICE STATION",
"GEN COMM-IND - WAREHOUSE",
"GEN COMM - BANK",
"GEN COMM - FAST FOOD",
"GEN COMM - HEALTH CARE FACILITY",
"GEN COMM - MIXED OFFICE/COMM",
"GEN COMM - NEIGHBORHOOD CTR",
"GEN COMM - OTHER",
"GEN COMM - REST/EATING FACILITY",
"GEN COMM - RETAIL/STRIP",
"GEN COMM - SMALL OFFICE",
"GEN COMM IMPR-LAND/NO SITE PLAN",
"GEN COMM IMPR-LAND/SITE PLAN",
"GEN COMM/PARKING",
"HOTEL - FULL SERVICE",
"HOTEL - LAND/OTHER",
"HOTEL - LIMITED SERVICE",
"HOTEL - LODGING",
"HOTEL - SELECT DRIVE",
"HOTEL RESIDENCE SUITES",
"MIXED USE",
"SFD - COMM ZONED/NO SITE PLAN",
"SFD - COMM ZONED/SITE PLAN") ~ "commercial",
countylandusedescription %in%
c("NOT VALUED CONDO HOA",
"SALES APPR CONDO/CO-OP",
"SALES APPR CONDO/GARDEN",
"SALES APPR CONDO/HIGH RISE",
"SALES APPR CONDO/MID RISE",
"SALES APPR CONDO/STACKED") ~ "condo",
countylandusedescription %in%
c("RESIDENTIAL COST-VAL - DUPLEX") ~ "duplex",
countylandusedescription %in%
c("OFFICE BLDG IMPR-LAND/SITE PLAN",
"OFFICE BLDG/7 OR MORE STORIES",
"OFFICE BLDG/PARKING",
"OFFICE BLDG/UNDER 7 STORIES") ~ "office",
countylandusedescription %in%
c("RESIDENTIAL COST-VAL - SIDE BY SIDE") ~ "sf attached",
countylandusedescription %in%
c("NOT VALUED COSTED - HOA/SITE PLAN",
"RESIDENTIAL COST-VAL - IMPR/SF & TW",
"RESIDENTIAL COST-VAL - SINGLE-FAM DET") ~ "sf detached",
countylandusedescription %in%
c("RESIDENTIAL COST-VAL - TOWNHOUSE/CO",
"RESIDENTIAL COST-VAL - TOWNHOUSE/FSO") ~ "townhouse",
countylandusedescription %in%
c("GEN COMM VAC-LAND/NO SITE PLAN",
"GEN COMM VAC-LAND/SITE PLAN",
"VACANT COMMERCIAL") ~ "vacant commercial",
countylandusedescription %in%
c("VACANT EXEMPT") ~ "Vacant exempt",
countylandusedescription %in%
c("VACANT LIGHT INDUSTRIAL") ~ "vacant light industrial",
countylandusedescription %in%
c("MULTI-FAM VACANT/NO SITE PLAN",
"MULTI-FAM VACANT/SITE PLAN") ~ "vacant mf",
countylandusedescription %in%
c("OFFICE BLDG VAC-LAND/NO SITE PLAN",
"OFFICE BLDG VAC-LAND/SITE PLAN",
"VACANT OFFICE") ~ "vacant office",
countylandusedescription %in%
c("VACANT RESIDENTIAL") ~ "vacant residential",
countylandusedescription %in%
c("RESIDENTIAL COST-VAL - VAC/SF & TW") ~ "vacant sf")
)
# identify properties with more than one observation
singles <- arlington1 %>%
group_by(propaddress) %>%
count() %>% filter(n == 1)
multiples <- arlington %>%
group_by(propaddress) %>%
count() %>% filter(n > 1)
multiples <- arlington %>%
group_by(propaddress) %>%
count() %>% slice( n> 1)
multiples <- arlington %>%
group_by(propaddress) %>%
count() %>% slice(n > 1)
View(multiples)
arl_mult <- arlington1 %>%
filter(propaddress %in% multiples$propaddress)
arl_sing <- arlington1 %>%
filter(propaddress %in% singles$propaddress)
nrow(arlington1) - nrow(arl_sing) - nrow(arl_mult)
print("all properties accounted for") {
else print("error in single/multiple classification")
}
print("all properties accounted for") }
if (nrow(arlington1) == nrow(arl_sing) + nrow(arl_mult)) {
print("all properties accounted for")
}
if (nrow(arlington1) != nrow(arl_sing) + nrow(arl_mult)) {
warning("error in single/multiple classification")
}
get_single_properties <- function(dataset) {
addresses <- dataset %>%
group_by(propaddress) %>%
count() %>% filter(n == 1) %>%
pull(propaddress)
dataset %>%
filter(propaddress %in% addresses)
}
get_single_properties(arlington1)
check_classification <- function(dataset,
single_data = singles,
multiple_data = multiples) {
if (nrow(dataset) != nrow(single_data) + nrow(multiple_data)) {
warning("error in single/multiple classification")
} else { print("singles and multiples add to total")
}
}
# identify properties with more than one observation
singles <- get_single_properties(arlington1)
get_multiple_properties <- function(dataset) {
addresses <- dataset %>%
group_by(propaddress) %>%
count() %>% filter(n > 1) %>%
pull(propaddress)
dataset %>%
filter(propaddress %in% addresses)
}
check_classification <- function(dataset,
single_data = singles,
multiple_data = multiples) {
if (nrow(dataset) != nrow(single_data) + nrow(multiple_data)) {
warning("error in single/multiple classification")
} else { print("singles and multiples add to total")
}
}
check_classification(arlington1)
multiples <- get_multiple_properties(arlington1)
check_classification(arlington1)
count(multiples, is.na(prophouseno))
mult_grouped <- multiples %>%
group_by(propaddress) %>%
count()
View(mult_grouped)
mult_grouped <- multiples %>%
# take out properties wihtout address or street number
filter(!is.na(propaddress),
!is.na(prophouseno)) %>%
group_by(propaddress) %>%
count()
mult_grouped <- multiples %>%
# take out properties wihtout address or street number
filter(!is.na(propaddress),
!is.na(prophouseno)) %>%
group_by(propaddress, zoning) %>%
count()
mult_grouped <- multiples %>%
# take out properties wihtout address or street number
filter(!is.na(propaddress),
!is.na(prophouseno)) %>%
group_by(propaddress, zoning, countylandusecode) %>%
count()
mult_grouped <- multiples %>%
# take out properties wihtout address or street number
filter(!is.na(propaddress),
!is.na(prophouseno)) %>%
group_by(propaddress, zoning, countylandusedescription) %>%
count()
mult_grouped <- multiples %>%
# take out properties wihtout address or street number
filter(!is.na(propaddress),
!is.na(prophouseno)) %>%
group_by(propaddress, zoning, category) %>%
count()
mult_grouped <- multiples %>%
# take out properties wihtout address or street number
filter(!is.na(propaddress),
!is.na(prophouseno)) %>%
group_by(propaddress, category) %>%
count()
mult_grouped <- multiples %>%
# take out properties wihtout address or street number
filter(!is.na(propaddress),
!is.na(prophouseno)) %>%
group_by(propaddress) %>%
count()
mult_grouped <- multiples %>%
# take out properties wihtout address or street number
filter(!is.na(propaddress),
!is.na(prophouseno)) %>%
group_by(propaddress, category) %>%
count()
View(mult_grouped)
mult_grouped <- multiples %>%
# take out properties wihtout address or street number
filter(!is.na(propaddress),
!is.na(prophouseno)) %>%
group_by(propaddress) %>%
count()
mult_grouped <- multiples %>%
# take out properties wihtout address or street number
filter(!is.na(propaddress),
!is.na(prophouseno)) %>%
group_by(propaddress, zoning) %>%
count()
View(mult_grouped)
mult_grouped <- multiples %>%
# take out properties without address or street number
filter(!is.na(propaddress),
!is.na(prophouseno)) %>%
group_by(propaddress, zoning) %>%
count() %>% group_by(n)
View(mult_grouped)
mult_grouped <- multiples %>%
# take out properties without address or street number
filter(!is.na(propaddress),
!is.na(prophouseno)) %>%
group_by(propaddress, zoning) %>%
count() %>% group_by(n) %>% count()
View(mult_grouped)
mult_grouped <- multiples %>%
# take out properties without address or street number
filter(!is.na(propaddress),
!is.na(prophouseno)) %>%
group_by(propaddress, zoning) %>%
count() %>% group_by(propaddress, n) %>% count()
View(mult_grouped)
count(mult_grouped, nn)
View(mult_grouped)
count(mult_grouped, nn == 1)
mult_grouped <- multiples %>%
# take out properties without address or street number
filter(!is.na(propaddress),
!is.na(prophouseno)) %>%
group_by(propaddress, zoning) %>%
count() %>% group_by(propaddress, n) %>% count() %>% ungroup()
count(mult_grouped, nn == 1)
count(mult_grouped, nn)
View(mult_grouped)
mult_grouped <- multiples %>%
# take out properties without address or street number
filter(!is.na(propaddress),
!is.na(prophouseno)) %>%
group_by(propaddress) %>%
count()
mult_grouped <- multiples %>%
# take out properties without address or street number
filter(!is.na(propaddress),
!is.na(prophouseno)) %>%
group_by(propaddress) %>%
count()
mult_grouped <- multiples %>%
# take out properties without address or street number
filter(!is.na(propaddress),
!is.na(prophouseno)) %>%
group_by(propaddress, zoning) %>%
count()
multiples %>%
tibble(a = c(a, a, a, b, b),
b = c(1, NA, 1, NA, 2)) %>%
fill(b)
tibble(a = c(a, a, a, b, b),
b = c(1, NA, 1, NA, 2))
multiples %>%
tibble(a = c("a", "a", "a", "b", "b"),
b = c(1, NA, 1, NA, 2)) %>%
fill(b)
tibble(a = c("a", "a", "a", "b", "b"),
b = c(1, NA, 1, NA, 2))
multiples %>%
boom <- tibble(a = c("a", "a", "a", "b", "b"),
b = c(1, NA, 1, NA, 2))
multiples %>%
boom <- tibble(a = c("a", "a", "a", "b", "b"),
b = c(1, NA, 1, NA, 2))
boom <- tibble(a = c("a", "a", "a", "b", "b"),
b = c(1, NA, 1, NA, 2))
fill(boom, b)
boom %>%
group_by(a) %>%
fill(b)
boom %>%
group_by(a) %>%
fill(b) %>%
fill(b, direction = "up")
fill
boom %>%
group_by(a) %>%
fill(b) %>%
fill(b, .direction = "up")
?mode
mode(boom$a)
mode(boom$b)
install.packages("DescTools")
library(DescTools)
Mode(boom$a)
Mode(boom$b)
?Mode
boom <- tibble(a = c("a", "a", "a", "b", "b", "b"),
b = c(1, NA, 1, NA, 2, 2))
Mode(boom$a)
Mode(boom$b)
View(arl_mult)
