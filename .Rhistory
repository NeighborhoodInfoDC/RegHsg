nested_all <- bind_rows(nested_done, nested_other) %>%
mutate_at(vars(lotsize_sf_sum, lsfirst, lsmode_num), as.double)
nested_all <- bind_rows(nested_done, nested_other) %>%
sapply(nested_all, class)
nested_all <- bind_rows(nested_done, nested_other) %>%
mutate_at(vars(lotsize_sf_sum, lsfirst, lsmode_num), as.double)
sapply(nested_all, class)
nested_all <- bind_rows(nested_done, nested_other) %>%
mutate_at(vars(lotsize_sf_sum, lsfirst, lsmode_num), as.double) %>%
mutate(lotsize_sf_final =
case_when(fxn == "first" ~ lsfirst,
fxn == "sum" ~ lotsize_sf_sum,
fxn == "mode" ~ lsmode_num,
fxn == "missing" ~ NA,
TRUE ~ NA))
# fxn == "missing" ~ NA,
# TRUE ~ NA))
nested_all <- bind_rows(nested_done, nested_other) %>%
mutate_at(vars(lotsize_sf_sum, lsfirst, lsmode_num), as.double) %>%
mutate(lotsize_sf_final =
case_when(fxn == "first" ~ lsfirst,
fxn == "sum" ~ lotsize_sf_sum,
fxn == "mode" ~ lsmode_num,
# fxn == "missing" ~ NA,
# TRUE ~ NA
))
count(nested_all, fxn == "missing")
count(nested_all, is.na(lotsize_sf_final))
ties <- nested_all %>%
mutate(ties_z = ifelse(map(zoning, length) > 1, 1, 0)) %>%
filter(ties_z == 1) %>%
mutate(z1 = map(zoning, function(x) x[1]),
z2 = map(zoning, function(x) x[2]),
z3 = map(zoning, function(x) x[3]),
cl1 = map(countylandusedescription, function(x) x[1]),
cl2 = map(countylandusedescription, function(x) x[2]),
cl3 = map(countylandusedescription, function(x) x[3])) %>%
select(propaddress, nprops,
z1, z2, z3,
cl1, cl2, cl3) %>%
unnest()
nested_final <- nested_all %>%
mutate(ties_z = ifelse(map(zoning, length) > 1, 1, 0)) %>%
filter(ties_z != 1) %>%
select(-ties_z)
names(nested_all)
multiples_f <- nested_all %>%
select(-ends_with("_list"))
multiples_f <- nested_all %>%
select(-ends_with("_list"), -lsmode, -lsfirst, -lsmode_num, -fxn) %>%
rename(lotsize_sf = lotsize_sf_final) %>%
mutate(lotsize_acres = lotsize_sf / 43560)
singles_f <- singles %>%
select(county_fips, county_name,
assessorsparcelnumberapnpin,
propaddress, propcity, propstate, propzip,
propunitno, prophouseno, propstreetname, propstreetsuffix,
lat, long, tract, owneroccupiedresidential,
countylandusedescription, zoning, buildingarea, noofbuildings,
noofstories, numberofunits,
lotsize_acres, lotsize_sf, address_type,
category, category_detail, residential)
multiples_f <- nested_all %>%
select(-ends_with("_list"), -lsmode, -lsfirst, -lsmode_num, -fxn) %>%
rename(lotsize_sf = lotsize_sf_final) %>%
mutate(lotsize_acres = lotsize_sf / 43560)
finaljur <- bind_rows(singles_f, multiples_f)
View(multiples_f)
multiples_f <- nested_final %>%
select(-ends_with("_list"), -lsmode, -lsfirst, -lsmode_num, -fxn, -unique_lots, -lotsize_sf_sum) %>%
mutate_at(vars(buildingarea, countylandusedescription, residential,
category, category_detail, yearbuilt, lat, long),
as.character) %>%
rename(lotsize_sf = lotsize_sf_final, numerofunits = nprops) %>%
mutate(lotsize_acres = lotsize_sf / 43560)
finaljur <- bind_rows(singles_f, multiples_f)
sapply(multiples_sf, class)
sapply(multiples_f, class)
multiples_f <- nested_final %>%
select(-ends_with("_list"), -lsmode, -lsfirst, -lsmode_num, -fxn, -unique_lots, -lotsize_sf_sum) %>%
mutate_at(vars(buildingarea, countylandusedescription, residential, zoning
category, category_detail, yearbuilt, lat, long),
multiples_f <- nested_final %>%
select(-ends_with("_list"), -lsmode, -lsfirst, -lsmode_num, -fxn, -unique_lots, -lotsize_sf_sum) %>%
mutate_at(vars(buildingarea, countylandusedescription, residential, zoning,
category, category_detail, yearbuilt, lat, long),
as.character) %>%
rename(lotsize_sf = lotsize_sf_final, numerofunits = nprops) %>%
mutate(lotsize_acres = lotsize_sf / 43560)
finaljur <- bind_rows(singles_f, multiples_f)
multiples_f <- nested_final %>%
select(-ends_with("_list"), -lsmode, -lsfirst, -lsmode_num, -fxn, -unique_lots, -lotsize_sf_sum) %>%
mutate_at(vars(countylandusedescription, residential, zoning,
category, category_detail, yearbuilt),
as.character) %>%
mutate_at(vars(buildingarea, lat, long), as.double) %>%
rename(lotsize_sf = lotsize_sf_final, numerofunits = nprops) %>%
mutate(lotsize_acres = lotsize_sf / 43560)
finaljur <- bind_rows(singles_f, multiples_f)
multiples_f <- nested_final %>%
select(-ends_with("_list"), -lsmode, -lsfirst, -lsmode_num, -fxn, -unique_lots, -lotsize_sf_sum) %>%
mutate_at(vars(countylandusedescription, zoning,
category, category_detail, yearbuilt),
as.character) %>%
mutate_at(vars(buildingarea, lat, long, residential), as.double) %>%
rename(lotsize_sf = lotsize_sf_final, numerofunits = nprops) %>%
mutate(lotsize_acres = lotsize_sf / 43560)
finaljur <- bind_rows(singles_f, multiples_f)
View(finaljur)
singles_f <- singles %>%
select(county_fips, county_name,
assessorsparcelnumberapnpin,
propaddress, propcity, propstate, propzip,
propunitno, prophouseno, propstreetname, propstreetsuffix,
lat, long, tract, owneroccupiedresidential,
countylandusedescription, zoning, buildingarea, noofbuildings,
noofstories, numberofunits, yearbuilt,
lotsize_acres, lotsize_sf, address_type,
category, category_detail, residential)
multiples_f <- nested_final %>%
select(-ends_with("_list"), -lsmode, -lsfirst, -lsmode_num, -fxn, -unique_lots, -lotsize_sf_sum) %>%
mutate_at(vars(countylandusedescription, zoning,
category, category_detail, yearbuilt),
as.character) %>%
mutate_at(vars(buildingarea, lat, long, residential), as.double) %>%
rename(lotsize_sf = lotsize_sf_final, numberofunits = nprops) %>%
mutate(lotsize_acres = lotsize_sf / 43560)
finaljur <- bind_rows(singles_f, multiples_f)
View(finaljur)
finaljur <- bind_rows(singles_f, multiples_f) %>%
fill(county_fips) %>%
fill(county_name)
write_csv(finaljur,
paste0("../Data/", filepath, "cleaned-data.csv"))
nested_all <- bind_rows(nested_done, nested_other) %>%
mutate_at(vars(lotsize_sf_sum, lsfirst, lsmode_num), as.double) %>%
mutate(lotsize_sf_final =
case_when(fxn == "first" ~ lsfirst,
fxn == "sum" ~ lotsize_sf_sum,
fxn == "mode" ~ lsmode_num))
currentjur_county <- currentjur %>%
group_by(countylandusedescription) %>%
count()
if (!file.exists(paste0("../Data/", filepath, "-county-land-use.csv"))) {
write_csv(currentjur_county,
paste0("../Data/", filepath, "-county-land-use.csv"))
}
res_codes <-
c("AFFORDABLE DWELLING UNIT",
"APARTMENT - GARDEN",
"APARTMENT - HIGH-RISE",
"APARTMENT - MID-RISE",
"APARTMENT - PARKING",
"COMMUNITY BENEFIT UNIT",
"MULTI-FAM IMPR/NO SITE PLAN",
"MULTI-FAM IMPR/SITE PLAN",
"MULTI-FAM VACANT/NO SITE PLAN",
"MULTI-FAM VACANT/SITE PLAN",
"NOT VALUED CONDO HOA",
"NOT VALUED COSTED - HOA/SITE PLAN",
"RESIDENTIAL COST-VAL - DUPLEX",
"RESIDENTIAL COST-VAL - IMPR/SF & TW",
"RESIDENTIAL COST-VAL - SIDE BY SIDE",
"RESIDENTIAL COST-VAL - SINGLE-FAM DET",
"RESIDENTIAL COST-VAL - TOWNHOUSE/CO",
"RESIDENTIAL COST-VAL - TOWNHOUSE/FSO",
"RESIDENTIAL COST-VAL - VAC/SF & TW",
"SALES APPR CONDO/CO-OP",
"SALES APPR CONDO/GARDEN",
"SALES APPR CONDO/HIGH RISE",
"SALES APPR CONDO/MID RISE",
"SALES APPR CONDO/STACKED",
"SFD - APT ZONED/NO SITE PLAN",
"SFD - APT ZONED/SITE PLAN",
"VACANT RESIDENTIAL")
currentjur_cat <- currentjur %>%
mutate(residential =
ifelse(countylandusedescription %in% res_codes, 1, 0),
category = case_when(
countylandusedescription %in%
c("COMMERCIAL CONDO",
"GEN COMM-IND - AUTO DEALERSHIP",
"GEN COMM-IND - SELF-STORAGE",
"GEN COMM-IND - SERVICE STATION",
"GEN COMM-IND - WAREHOUSE",
"GEN COMM - BANK",
"GEN COMM - FAST FOOD",
"GEN COMM - HEALTH CARE FACILITY",
"GEN COMM - MIXED OFFICE/COMM",
"GEN COMM - NEIGHBORHOOD CTR",
"GEN COMM - OTHER",
"GEN COMM - REST/EATING FACILITY",
"GEN COMM - RETAIL/STRIP",
"GEN COMM - SMALL OFFICE",
"GEN COMM IMPR-LAND/NO SITE PLAN",
"GEN COMM IMPR-LAND/SITE PLAN",
"GEN COMM/PARKING",
"HOTEL - FULL SERVICE",
"HOTEL - LAND/OTHER",
"HOTEL - LIMITED SERVICE",
"HOTEL - LODGING",
"HOTEL - SELECT DRIVE",
"HOTEL RESIDENCE SUITES",
"MIXED USE",
"SFD - COMM ZONED/NO SITE PLAN",
"SFD - COMM ZONED/SITE PLAN") ~ "commercial",
countylandusedescription %in%
c("AFFORDABLE DWELLING UNIT",
"APARTMENT - GARDEN",
"APARTMENT - HIGH-RISE",
"APARTMENT - MID-RISE",
"APARTMENT - PARKING",
"COMMUNITY BENEFIT UNIT",
"MULTI-FAM IMPR/NO SITE PLAN",
"MULTI-FAM IMPR/SITE PLAN",
"NOT VALUED CONDO HOA",
"RESIDENTIAL COST-VAL - DUPLEX",
"SALES APPR CONDO/CO-OP",
"SALES APPR CONDO/GARDEN",
"SALES APPR CONDO/HIGH RISE",
"SALES APPR CONDO/MID RISE",
"SALES APPR CONDO/STACKED",
"SFD - APT ZONED/NO SITE PLAN",
"SFD - APT ZONED/SITE PLAN") ~ "mf",
countylandusedescription %in%
c("OFFICE BLDG IMPR-LAND/SITE PLAN",
"OFFICE BLDG/7 OR MORE STORIES",
"OFFICE BLDG/PARKING",
"OFFICE BLDG/UNDER 7 STORIES") ~ "office",
countylandusedescription %in%
c("NOT VALUED COSTED - HOA/SITE PLAN",
"RESIDENTIAL COST-VAL - IMPR/SF & TW",
"RESIDENTIAL COST-VAL - SIDE BY SIDE",
"RESIDENTIAL COST-VAL - SINGLE-FAM DET",
"RESIDENTIAL COST-VAL - TOWNHOUSE/CO",
"RESIDENTIAL COST-VAL - TOWNHOUSE/FSO") ~ "sf",
countylandusedescription %in%
c("MULTI-FAM VACANT/NO SITE PLAN",
"MULTI-FAM VACANT/SITE PLAN",
"RESIDENTIAL COST-VAL - VAC/SF & TW",
"VACANT RESIDENTIAL",
"GEN COMM VAC-LAND/NO SITE PLAN",
"GEN COMM VAC-LAND/SITE PLAN",
"OFFICE BLDG VAC-LAND/NO SITE PLAN",
"OFFICE BLDG VAC-LAND/SITE PLAN",
"VACANT COMMERCIAL",
"VACANT EXEMPT",
"VACANT LIGHT INDUSTRIAL",
"VACANT OFFICE") ~ "vacant"),
category_detail = case_when(
countylandusedescription %in%
c("AFFORDABLE DWELLING UNIT",
"APARTMENT - GARDEN",
"APARTMENT - HIGH-RISE",
"APARTMENT - MID-RISE",
"APARTMENT - PARKING",
"COMMUNITY BENEFIT UNIT",
"MULTI-FAM IMPR/NO SITE PLAN",
"MULTI-FAM IMPR/SITE PLAN",
"SFD - APT ZONED/NO SITE PLAN",
"SFD - APT ZONED/SITE PLAN") ~ "apartment",
countylandusedescription %in%
c("COMMERCIAL CONDO",
"GEN COMM-IND - AUTO DEALERSHIP",
"GEN COMM-IND - SELF-STORAGE",
"GEN COMM-IND - SERVICE STATION",
"GEN COMM-IND - WAREHOUSE",
"GEN COMM - BANK",
"GEN COMM - FAST FOOD",
"GEN COMM - HEALTH CARE FACILITY",
"GEN COMM - MIXED OFFICE/COMM",
"GEN COMM - NEIGHBORHOOD CTR",
"GEN COMM - OTHER",
"GEN COMM - REST/EATING FACILITY",
"GEN COMM - RETAIL/STRIP",
"GEN COMM - SMALL OFFICE",
"GEN COMM IMPR-LAND/NO SITE PLAN",
"GEN COMM IMPR-LAND/SITE PLAN",
"GEN COMM/PARKING",
"HOTEL - FULL SERVICE",
"HOTEL - LAND/OTHER",
"HOTEL - LIMITED SERVICE",
"HOTEL - LODGING",
"HOTEL - SELECT DRIVE",
"HOTEL RESIDENCE SUITES",
"MIXED USE",
"SFD - COMM ZONED/NO SITE PLAN",
"SFD - COMM ZONED/SITE PLAN") ~ "commercial",
countylandusedescription %in%
c("NOT VALUED CONDO HOA",
"SALES APPR CONDO/CO-OP",
"SALES APPR CONDO/GARDEN",
"SALES APPR CONDO/HIGH RISE",
"SALES APPR CONDO/MID RISE",
"SALES APPR CONDO/STACKED") ~ "condo",
countylandusedescription %in%
c("RESIDENTIAL COST-VAL - DUPLEX") ~ "duplex",
countylandusedescription %in%
c("OFFICE BLDG IMPR-LAND/SITE PLAN",
"OFFICE BLDG/7 OR MORE STORIES",
"OFFICE BLDG/PARKING",
"OFFICE BLDG/UNDER 7 STORIES") ~ "office",
countylandusedescription %in%
c("RESIDENTIAL COST-VAL - SIDE BY SIDE") ~ "sf attached",
countylandusedescription %in%
c("NOT VALUED COSTED - HOA/SITE PLAN",
"RESIDENTIAL COST-VAL - IMPR/SF & TW",
"RESIDENTIAL COST-VAL - SINGLE-FAM DET") ~ "sf detached",
countylandusedescription %in%
c("RESIDENTIAL COST-VAL - TOWNHOUSE/CO",
"RESIDENTIAL COST-VAL - TOWNHOUSE/FSO") ~ "townhouse",
countylandusedescription %in%
c("GEN COMM VAC-LAND/NO SITE PLAN",
"GEN COMM VAC-LAND/SITE PLAN",
"VACANT COMMERCIAL") ~ "vacant commercial",
countylandusedescription %in%
c("VACANT EXEMPT") ~ "Vacant exempt",
countylandusedescription %in%
c("VACANT LIGHT INDUSTRIAL") ~ "vacant light industrial",
countylandusedescription %in%
c("MULTI-FAM VACANT/NO SITE PLAN",
"MULTI-FAM VACANT/SITE PLAN") ~ "vacant mf",
countylandusedescription %in%
c("OFFICE BLDG VAC-LAND/NO SITE PLAN",
"OFFICE BLDG VAC-LAND/SITE PLAN",
"VACANT OFFICE") ~ "vacant office",
countylandusedescription %in%
c("VACANT RESIDENTIAL") ~ "vacant residential",
countylandusedescription %in%
c("RESIDENTIAL COST-VAL - VAC/SF & TW") ~ "vacant sf"),
building_type = case_when(
countylandusedescription %in%
c("APARTMENT - GARDEN",
"SALES APPR CONDO/GARDEN") ~ "garden",
countylandusedescription %in%
c("APARTMENT - HIGH-RISE",
"SALES APPR CONDO/HIGH RISE") ~ "high-rise",
countylandusedescription %in%
c("SALES APPR CONDO/MID RISE",
"APARTMENT - MID-RISE") ~ "mid-rise",
countylandusedescription %in%
c("APARTMENT - PARKING") ~ "parking",
countylandusedescription %in%
c("SALES APPR CONDO/STACKED") ~ "stacked",
countylandusedescription %in%
c("SALES APPR CONDO/CO-OP") ~ "co-op",
countylandusedescription %in%
c("RESIDENTIAL COST-VAL - DUPLEX") ~ "duplex",
countylandusedescription %in%
c("AFFORDABLE DWELLING UNIT",
"COMMUNITY BENEFIT UNIT",
"MULTI-FAM IMPR/NO SITE PLAN",
"MULTI-FAM IMPR/SITE PLAN",
"NOT VALUED CONDO HOA",
"SFD - APT ZONED/NO SITE PLAN",
"SFD - APT ZONED/SITE PLAN") ~ "other")
)
sum(!is.na(currentjur_cat$building_type))
nrow(filter(currentjur_cat, category == "mf"))
currentjur_cat <- currentjur_cat %>%
mutate(parcel_address = substr(assessorsparcelnumberapnpin, 1, 6))
bad_parcels <- currentjur_cat %>%
group_by(propaddress) %>%
summarize(parcel = list(parcel_address)) %>%
mutate(unq_parcels = as.integer(map(parcel,
function(x) length(unique(x))))) %>%
filter(unq_parcels > 1)
bad_addresses <- bad_parcels %>%
pull(propaddress)
currentjur_cat <- currentjur_cat %>%
mutate(parcel_address = ifelse(propaddress %in% bad_addresses,
NA,
parcel_address))
currentjur_cat %>%
filter(residential == 1) %>%
group_by(propaddress) %>%
count() %>%
nrow()
currentjur_cat %>%
filter(residential == 1) %>%
group_by(propaddress, parcel_address) %>%
count() %>%
nrow()
nested <- multiples %>%
group_by(propaddress, parcel_address) %>%
summarise_at(vars(zoning, lotsize_acres, lotsize_sf,
buildingarea, countylandusedescription,
residential, category, category_detail,
yearbuilt, long, lat), list) %>%
rename_at(vars(-propaddress, -parcel_address), ~ paste0(., "_list")) %>%
mutate(nprops = map(zoning_list, length),
zoning = map(zoning_list, Mode),
lotsize_sf_sum = map(lotsize_sf_list, function(x) sum(x, na.rm = TRUE)),
buildingarea = map(buildingarea_list, function(x) sum(x, na.rm = TRUE)),
countylandusedescription = map(countylandusedescription_list, Mode),
residential = map(residential_list, max),
category = map(category_list, Mode),
category_detail = map(category_detail_list, Mode),
yearbuilt = map(yearbuilt_list, function(x) max(x, na.rm = TRUE)),
long = map(long_list, median),
lat = map(lat_list, median))
nested1 <- nested1 %>%
mutate(fxn = case_when(
lotsize_sf_sum < 1 ~ "missing",
nprops == unique_lots ~ "sum",
unique_lots == 1 ~ "first",
TRUE ~ "other"
))
nested1 %>% count(fxn)
nested_done <- nested1 %>%
filter(fxn != "other")
nested_other <- nested1 %>%
filter(fxn == "other") %>%
mutate(lsmode_num = ifelse(map(lsmode, length) > 1, NA, lsmode),
lsmode_num = as.integer(lsmode_num),
fxn = case_when(
nprops > 500 ~ "missing",
lsmode_num > 8000 ~ "mode",
TRUE ~ "sum"
))
count(nested_other, fxn)
nested_all <- bind_rows(nested_done, nested_other) %>%
mutate_at(vars(lotsize_sf_sum, lsfirst, lsmode_num), as.double) %>%
mutate(lotsize_sf_final =
case_when(fxn == "first" ~ lsfirst,
fxn == "sum" ~ lotsize_sf_sum,
fxn == "mode" ~ lsmode_num))
count(nested_all, fxn == "missing")
count(nested_all, is.na(lotsize_sf_final))
ties <- nested_all %>%
mutate(ties_z = ifelse(map(zoning, length) > 1, 1, 0)) %>%
filter(ties_z == 1) %>%
mutate(z1 = map(zoning, function(x) x[1]),
z2 = map(zoning, function(x) x[2]),
z3 = map(zoning, function(x) x[3]),
cl1 = map(countylandusedescription, function(x) x[1]),
cl2 = map(countylandusedescription, function(x) x[2]),
cl3 = map(countylandusedescription, function(x) x[3])) %>%
select(propaddress, nprops,
z1, z2, z3,
cl1, cl2, cl3) %>%
unnest()
ties %>%
select(propaddress, z1, z2) %>%
head(5)
nested_final <- nested_all %>%
mutate(ties_z = ifelse(map(zoning, length) > 1, 1, 0)) %>%
filter(ties_z != 1) %>%
select(-ties_z)
count(singles, category_detail)
singles <- singles %>%
mutate(category = ifelse(category_detail == "condo",
"sf",
category),
category_detail = ifelse(category_detail == "condo",
"sf attached",
category_detail))
singles_f <- singles %>%
select(county_fips, county_name,
assessorsparcelnumberapnpin,
propaddress, propcity, propstate, propzip,
propunitno, prophouseno, propstreetname, propstreetsuffix,
lat, long, tract, owneroccupiedresidential,
countylandusedescription, zoning, buildingarea, noofbuildings,
noofstories, numberofunits, yearbuilt,
lotsize_acres, lotsize_sf, address_type,
category, category_detail, residential)
multiples_f <- nested_final %>%
select(-ends_with("_list"), -lsmode, -lsfirst, -lsmode_num, -fxn, -unique_lots, -lotsize_sf_sum) %>%
mutate_at(vars(countylandusedescription, zoning,
category, category_detail, yearbuilt),
as.character) %>%
mutate_at(vars(buildingarea, lat, long, residential), as.double) %>%
rename(lotsize_sf = lotsize_sf_final, numberofunits = nprops) %>%
mutate(lotsize_acres = lotsize_sf / 43560)
finaljur <- bind_rows(singles_f, multiples_f) %>%
fill(county_fips) %>%
fill(county_name)
write_csv(finaljur,
paste0("../Data/", filepath, "cleaned-data.csv"))
View(singles_f)
singles <- get_single_properties(currentjur_cat2)
singles <- singles %>%
mutate(category = ifelse(category_detail == "condo",
"sf",
category),
category_detail = ifelse(category_detail == "condo",
"sf attached",
category_detail))
singles_f <- singles %>%
select(county_fips, county_name,
assessorsparcelnumberapnpin,
propaddress, propcity, propstate, propzip,
propunitno, prophouseno, propstreetname, propstreetsuffix,
lat, long, tract, owneroccupiedresidential,
countylandusedescription, zoning, buildingarea, noofbuildings,
noofstories, numberofunits, yearbuilt,
lotsize_acres, lotsize_sf, address_type,
category, category_detail, residential, building_type)
multiples_f <- nested_final %>%
select(-ends_with("_list"), -lsmode, -lsfirst, -lsmode_num, -fxn, -unique_lots, -lotsize_sf_sum) %>%
mutate_at(vars(countylandusedescription, zoning,
category, category_detail, yearbuilt),
as.character) %>%
mutate_at(vars(buildingarea, lat, long, residential), as.double) %>%
rename(lotsize_sf = lotsize_sf_final, numberofunits = nprops) %>%
mutate(lotsize_acres = lotsize_sf / 43560)
finaljur <- bind_rows(singles_f, multiples_f) %>%
fill(county_fips) %>%
fill(county_name)
write_csv(finaljur,
paste0("../Data/", filepath, "cleaned-data.csv"))
