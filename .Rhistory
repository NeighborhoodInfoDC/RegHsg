vacant <- vacant %>%
mutate(zoning_code = ifelse(str_detect(zoning, "/") == TRUE,
NA,
zoning),
zoning_code = ifelse(zoning_code == "RC",
"R-C",
zoning_code))
View(vacant)
zoningdata <- left_join(vacant, zoningcode, by = "zoning_code")
zoningdata <- left_join(vacant, vacant_zoning, by = "zoning_code")
stopifnot(nrow(anti_join(vacant, vacant_zoning, by = "zoning_code")) == 0)
anti_join(vacant, vacant_zoning, by = "zoning_code")
x <- anti_join(vacant, vacant_zoning, by = "zoning_code")
View(x)
x <- anti_join(vacant, vacant_zoning, by = "zoning_code") %>%
count(category_detail)
View(x)
x <- anti_join(vacant, vacant_zoning, by = "zoning_code") %>%
count(zoning_code)
View(x)
anti_join(vacant, vacant_zoning, by = "zoning_code") %>%
count(zoning_code) %>%
knitr::kable()
View(zoningcode)
vacant <- vacant %>%
mutate(zoning_code = ifelse(str_detect(zoning, "/") == TRUE,
NA,
zoning),
zoning_code = ifelse(zoning_code == "character(0)",
NA,
zoning_code),
zoning_code = ifelse(zoning_code == "RC",
"R-C",
zoning_code),
zoning_code = ifelse(zoning_code == "C-O-ROSSLYN",
"C-O Rosslyn"))
vacant <- vacant %>%
mutate(zoning_code = ifelse(str_detect(zoning, "/") == TRUE,
NA,
zoning),
zoning_code = ifelse(zoning_code == "character(0)",
NA,
zoning_code),
zoning_code = ifelse(zoning_code == "RC",
"R-C",
zoning_code),
zoning_code = ifelse(zoning_code == "C-O-ROSSLYN",
"C-O Rosslyn",
zoning_code))
anti_join(vacant, vacant_zoning, by = "zoning_code") %>%
count(zoning_code) %>%
knitr::kable()
missing_zoning <- vacant %>%
filter(is.na(zoning))
missing_zoning <- vacant %>%
filter(is.na(zoning_code))
View(missing_zoning)
missing_zoning %>%
summarize(missing_addreess = sum(is.na(propaddress)),
zoning_tie = sum(str_detect(zoning, "/") == TRUE))
View(missing_zoning)
missing_zoning %>%
summarize(missing_addreess = sum(is.na(propaddress)),
zoning_tie = sum(str_detect(zoning, "/") == TRUE), na.rm = TRUE)
missing_zoning %>%
summarize(missing_addreess = sum(is.na(propaddress)),
zoning_tie = sum(str_detect(zoning, "/") == TRUE, na.rm = TRUE))
missing_zoning %>%
filter(!is.na(propaddress),
str_detect(zoning, "/") == FALSE)
missing_zoning %>%
filter(!is.na(propaddress),
str_detect(zoning, "/") == FALSE) %>%
nrow()
missing_zoning %>%
filter(!is.na(propaddress),
str_detect(zoning, "/") == FALSE) %>%
nrow()
missing_zoning %>%
filter(!is.na(propaddress),
str_detect(zoning, "/") == FALSE)
y <-
missing_zoning %>%
filter(!is.na(propaddress),
str_detect(zoning, "/") == FALSE) %>%
nrow()
y <- missing_zoning %>%
filter(!is.na(propaddress),
str_detect(zoning, "/") == FALSE)
View(y)
library(tidyverse)
library(DescTools)
library(purrr)
source("../Macros/read-bk.R")
source("../Macros/filter-bk.R")
source("../Macros/select-vars.R")
source("../Macros/sample-properties.R")
source("../Macros/classify-addresses.R")
if (!dir.exists("Data")) {
dir.create("Data")
}
currentfips <- "51013"
filepath <- "arlington"
if (!exists("region")) {
region <- read_bk("dc-cog-assessment_20181228.csv")
} else {
warning("region data already read in")
}
if (!exists("region")) {
region <- read_bk("dc-cog-assessment_20181228.csv")
} else {
warning("region data already read in")
}
jur <- region %>%
filter_bk(fips = currentfips) %>%
select_vars()
res_codes <-
c("AFFORDABLE DWELLING UNIT",
"APARTMENT - GARDEN",
"APARTMENT - HIGH-RISE",
"APARTMENT - MID-RISE",
"APARTMENT - PARKING",
"COMMUNITY BENEFIT UNIT",
"MULTI-FAM IMPR/NO SITE PLAN",
"MULTI-FAM IMPR/SITE PLAN",
"MULTI-FAM VACANT/NO SITE PLAN",
"MULTI-FAM VACANT/SITE PLAN",
"NOT VALUED CONDO HOA",
"NOT VALUED COSTED - HOA/SITE PLAN",
"RESIDENTIAL COST-VAL - DUPLEX",
"RESIDENTIAL COST-VAL - IMPR/SF & TW",
"RESIDENTIAL COST-VAL - SIDE BY SIDE",
"RESIDENTIAL COST-VAL - SINGLE-FAM DET",
"RESIDENTIAL COST-VAL - TOWNHOUSE/CO",
"RESIDENTIAL COST-VAL - TOWNHOUSE/FSO",
"RESIDENTIAL COST-VAL - VAC/SF & TW",
"SALES APPR CONDO/CO-OP",
"SALES APPR CONDO/GARDEN",
"SALES APPR CONDO/HIGH RISE",
"SALES APPR CONDO/MID RISE",
"SALES APPR CONDO/STACKED",
"SFD - APT ZONED/NO SITE PLAN",
"SFD - APT ZONED/SITE PLAN",
"VACANT RESIDENTIAL",
"SFD - COMM ZONED/NO SITE PLAN",
"SFD - COMM ZONED/SITE PLAN")
jur <- jur %>%
mutate(residential =
ifelse(countylandusedescription %in% res_codes, 1, 0))
rm(res_codes)
commercial <- c("COMMERCIAL CONDO",
"GEN COMM-IND - AUTO DEALERSHIP",
"GEN COMM-IND - SELF-STORAGE",
"GEN COMM-IND - SERVICE STATION",
"GEN COMM-IND - WAREHOUSE",
"GEN COMM - BANK",
"GEN COMM - FAST FOOD",
"GEN COMM - HEALTH CARE FACILITY",
"GEN COMM - MIXED OFFICE/COMM",
"GEN COMM - NEIGHBORHOOD CTR",
"GEN COMM - OTHER",
"GEN COMM - REST/EATING FACILITY",
"GEN COMM - RETAIL/STRIP",
"GEN COMM - SMALL OFFICE",
"GEN COMM IMPR-LAND/NO SITE PLAN",
"GEN COMM IMPR-LAND/SITE PLAN",
"GEN COMM/PARKING",
"HOTEL - FULL SERVICE",
"HOTEL - LAND/OTHER",
"HOTEL - LIMITED SERVICE",
"HOTEL - LODGING",
"HOTEL - SELECT DRIVE",
"HOTEL RESIDENCE SUITES",
"MIXED USE")
mf <- c("AFFORDABLE DWELLING UNIT",
"APARTMENT - GARDEN",
"APARTMENT - HIGH-RISE",
"APARTMENT - MID-RISE",
"APARTMENT - PARKING",
"COMMUNITY BENEFIT UNIT",
"MULTI-FAM IMPR/NO SITE PLAN",
"MULTI-FAM IMPR/SITE PLAN",
"NOT VALUED CONDO HOA",
"RESIDENTIAL COST-VAL - DUPLEX",
"SALES APPR CONDO/CO-OP",
"SALES APPR CONDO/GARDEN",
"SALES APPR CONDO/HIGH RISE",
"SALES APPR CONDO/MID RISE",
"SALES APPR CONDO/STACKED")
office <- c("OFFICE BLDG IMPR-LAND/SITE PLAN",
"OFFICE BLDG/7 OR MORE STORIES",
"OFFICE BLDG/PARKING",
"OFFICE BLDG/UNDER 7 STORIES")
sf <- c("NOT VALUED COSTED - HOA/SITE PLAN",
"RESIDENTIAL COST-VAL - IMPR/SF & TW",
"RESIDENTIAL COST-VAL - SIDE BY SIDE",
"RESIDENTIAL COST-VAL - SINGLE-FAM DET",
"RESIDENTIAL COST-VAL - TOWNHOUSE/CO",
"RESIDENTIAL COST-VAL - TOWNHOUSE/FSO",
"SFD - APT ZONED/NO SITE PLAN",
"SFD - APT ZONED/SITE PLAN",
"SFD - COMM ZONED/NO SITE PLAN",
"SFD - COMM ZONED/SITE PLAN")
vacant <- c("MULTI-FAM VACANT/NO SITE PLAN",
"MULTI-FAM VACANT/SITE PLAN",
"RESIDENTIAL COST-VAL - VAC/SF & TW",
"VACANT RESIDENTIAL",
"GEN COMM VAC-LAND/NO SITE PLAN",
"GEN COMM VAC-LAND/SITE PLAN",
"OFFICE BLDG VAC-LAND/NO SITE PLAN",
"OFFICE BLDG VAC-LAND/SITE PLAN",
"VACANT COMMERCIAL",
"VACANT EXEMPT",
"VACANT LIGHT INDUSTRIAL",
"VACANT OFFICE")
jur <- jur %>%
mutate(category = case_when(
countylandusedescription %in% commercial ~ "commercial",
countylandusedescription %in% mf ~ "mf",
countylandusedescription %in% office ~ "office",
countylandusedescription %in% sf ~ "sf",
countylandusedescription %in% vacant ~ "vacant"))
rm(commercial, office, mf, sf, vacant)
apartment <- c("AFFORDABLE DWELLING UNIT",
"APARTMENT - GARDEN",
"APARTMENT - HIGH-RISE",
"APARTMENT - MID-RISE",
"APARTMENT - PARKING",
"COMMUNITY BENEFIT UNIT",
"MULTI-FAM IMPR/NO SITE PLAN",
"MULTI-FAM IMPR/SITE PLAN")
commercial <- c("COMMERCIAL CONDO",
"GEN COMM-IND - AUTO DEALERSHIP",
"GEN COMM-IND - SELF-STORAGE",
"GEN COMM-IND - SERVICE STATION",
"GEN COMM-IND - WAREHOUSE",
"GEN COMM - BANK",
"GEN COMM - FAST FOOD",
"GEN COMM - HEALTH CARE FACILITY",
"GEN COMM - MIXED OFFICE/COMM",
"GEN COMM - NEIGHBORHOOD CTR",
"GEN COMM - OTHER",
"GEN COMM - REST/EATING FACILITY",
"GEN COMM - RETAIL/STRIP",
"GEN COMM - SMALL OFFICE",
"GEN COMM IMPR-LAND/NO SITE PLAN",
"GEN COMM IMPR-LAND/SITE PLAN",
"GEN COMM/PARKING",
"HOTEL - FULL SERVICE",
"HOTEL - LAND/OTHER",
"HOTEL - LIMITED SERVICE",
"HOTEL - LODGING",
"HOTEL - SELECT DRIVE",
"HOTEL RESIDENCE SUITES",
"MIXED USE")
condo <- c("NOT VALUED CONDO HOA",
"SALES APPR CONDO/CO-OP",
"SALES APPR CONDO/GARDEN",
"SALES APPR CONDO/HIGH RISE",
"SALES APPR CONDO/MID RISE",
"SALES APPR CONDO/STACKED")
duplex <- c("RESIDENTIAL COST-VAL - DUPLEX")
office <- c("OFFICE BLDG IMPR-LAND/SITE PLAN",
"OFFICE BLDG/7 OR MORE STORIES",
"OFFICE BLDG/PARKING",
"OFFICE BLDG/UNDER 7 STORIES")
sfattached <- c("RESIDENTIAL COST-VAL - SIDE BY SIDE")
sfdetached <- c("NOT VALUED COSTED - HOA/SITE PLAN",
"RESIDENTIAL COST-VAL - IMPR/SF & TW",
"RESIDENTIAL COST-VAL - SINGLE-FAM DET",
"SFD - APT ZONED/NO SITE PLAN",
"SFD - APT ZONED/SITE PLAN",
"SFD - COMM ZONED/NO SITE PLAN",
"SFD - COMM ZONED/SITE PLAN")
townhouse <-  c("RESIDENTIAL COST-VAL - TOWNHOUSE/CO",
"RESIDENTIAL COST-VAL - TOWNHOUSE/FSO")
vacantcom <- c("GEN COMM VAC-LAND/NO SITE PLAN",
"GEN COMM VAC-LAND/SITE PLAN",
"VACANT COMMERCIAL")
vacantexempt <- c("VACANT EXEMPT")
vacantlight <- c("VACANT LIGHT INDUSTRIAL")
vacantmf <- c("MULTI-FAM VACANT/NO SITE PLAN",
"MULTI-FAM VACANT/SITE PLAN")
vacantoffice <- c("OFFICE BLDG VAC-LAND/NO SITE PLAN",
"OFFICE BLDG VAC-LAND/SITE PLAN",
"VACANT OFFICE")
vacantres <- c("VACANT RESIDENTIAL")
vacantsf <- c("RESIDENTIAL COST-VAL - VAC/SF & TW")
jur <- jur %>%
mutate(category_detail = case_when(
countylandusedescription %in% apartment ~ "apartment",
countylandusedescription %in% commercial ~ "commercial",
countylandusedescription %in% condo ~ "condo",
countylandusedescription %in% duplex ~ "duplex",
countylandusedescription %in% office ~ "office",
countylandusedescription %in% sfattached ~ "sf attached",
countylandusedescription %in% sfdetached ~ "sf detached",
countylandusedescription %in% townhouse ~ "townhouse",
countylandusedescription %in% vacantcom ~ "vacant commercial",
countylandusedescription %in% vacantexempt ~ "vacant exempt",
countylandusedescription %in% vacantlight ~ "vacant light industrial",
countylandusedescription %in% vacantmf ~ "vacant mf",
countylandusedescription %in% vacantoffice ~ "vacant office",
countylandusedescription %in% vacantres ~ "vacant residential",
countylandusedescription %in% vacantsf ~ "vacant sf"))
rm(apartment, commercial, condo, duplex,
office, sfattached, sfdetached, townhouse,
vacantcom, vacantexempt, vacantlight, vacantmf,
vacantoffice, vacantres, vacantsf)
garden <- c("APARTMENT - GARDEN",
"SALES APPR CONDO/GARDEN")
highrise <- c("APARTMENT - HIGH-RISE",
"SALES APPR CONDO/HIGH RISE")
midrise <- c("SALES APPR CONDO/MID RISE",
"APARTMENT - MID-RISE")
parking <- c("APARTMENT - PARKING")
stacked <- c("SALES APPR CONDO/STACKED")
coop <- c("SALES APPR CONDO/CO-OP")
duplex <- c("RESIDENTIAL COST-VAL - DUPLEX")
other <- c("AFFORDABLE DWELLING UNIT",
"COMMUNITY BENEFIT UNIT",
"MULTI-FAM IMPR/NO SITE PLAN",
"MULTI-FAM IMPR/SITE PLAN",
"NOT VALUED CONDO HOA")
jur <- jur %>%
mutate(building_type = case_when(
countylandusedescription %in% garden ~ "garden",
countylandusedescription %in% highrise  ~ "high-rise",
countylandusedescription %in% midrise ~ "mid-rise",
countylandusedescription %in% parking ~ "parking",
countylandusedescription %in% stacked ~ "stacked",
countylandusedescription %in% coop ~ "co-op",
countylandusedescription %in% duplex ~ "duplex",
countylandusedescription %in% other ~ "other"))
rm(garden, highrise, midrise, parking, stacked, coop, duplex, other)
garden <- c("APARTMENT - GARDEN",
"SALES APPR CONDO/GARDEN")
highrise <- c("APARTMENT - HIGH-RISE",
"SALES APPR CONDO/HIGH RISE")
midrise <- c("SALES APPR CONDO/MID RISE",
"APARTMENT - MID-RISE")
parking <- c("APARTMENT - PARKING")
stacked <- c("SALES APPR CONDO/STACKED")
coop <- c("SALES APPR CONDO/CO-OP")
duplex <- c("RESIDENTIAL COST-VAL - DUPLEX")
other <- c("AFFORDABLE DWELLING UNIT",
"COMMUNITY BENEFIT UNIT",
"MULTI-FAM IMPR/NO SITE PLAN",
"MULTI-FAM IMPR/SITE PLAN",
"NOT VALUED CONDO HOA")
jur <- jur %>%
mutate(building_type = case_when(
countylandusedescription %in% garden ~ "garden",
countylandusedescription %in% highrise  ~ "high-rise",
countylandusedescription %in% midrise ~ "mid-rise",
countylandusedescription %in% parking ~ "parking",
countylandusedescription %in% stacked ~ "stacked",
countylandusedescription %in% coop ~ "co-op",
countylandusedescription %in% duplex ~ "duplex",
countylandusedescription %in% other ~ "other"))
rm(garden, highrise, midrise, parking, stacked, coop, duplex, other)
count(jur, lotsizeareaunit)
jur <- jur %>%
mutate(lotsize_acres = case_when(lotsizeareaunit == "AC" ~ lotsizeorarea ,
lotsizeareaunit == "SF" ~ lotsizeorarea / 43560),
lotsize_sf = lotsize_acres * 43560) %>%
mutate_at(vars(lotsize_acres, lotsize_sf), ~ replace(., .==0, NA))
jur <- jur %>%
mutate(parcel_address = substr(assessorsparcelnumberapnpin, 1, 6))
bad_parcels <- jur %>%
group_by(propaddress) %>%
summarize(parcel = list(parcel_address)) %>%
mutate(unq_parcels = as.integer(map(parcel,
function(x) length(unique(x))))) %>%
filter(unq_parcels > 1)
bad_addresses <- bad_parcels %>%
pull(propaddress)
jur <- jur %>%
mutate(parcel_address = ifelse(propaddress %in% bad_addresses,
NA,
parcel_address))
rm(bad_addresses, bad_parcels)
jur <- jur %>%
mutate(parcel_address = substr(assessorsparcelnumberapnpin, 1, 6))
View(jur)
bad_parcels <- jur %>%
group_by(propaddress) %>%
summarize(parcel = list(parcel_address))
View(bad_parcels)
s <- c(1, 2, 2)
length(s)
unique(length(s))
unique(s)
length(unique(x))
bad_parcels <- jur %>%
group_by(propaddress) %>%
summarize(parcel = list(parcel_address)) %>%
mutate(unq_parcels = as.integer(map(parcel,
function(x) length(unique(x))))) %>%
filter(unq_parcels > 1)
View(bad_parcels)
bad_addresses <- bad_parcels %>%
pull(propaddress)
x <- jur %>%
filter(residential == 1) %>%
group_by(propaddress) %>%
count() %>%
nrow()
y <- jur %>%
filter(residential == 1) %>%
group_by(propaddress, parcel_address) %>%
count() %>%
nrow()
if (x == y) {
print(paste0(x, " = ", y, ": clean collapse"))
} else if (y > x) {
warning("additional observations introduced")
}
jur <- jur %>%
mutate(parcel_address = ifelse(propaddress %in% bad_addresses,
NA,
parcel_address))
x <- jur %>%
filter(residential == 1) %>%
group_by(propaddress) %>%
count() %>%
nrow()
y <- jur %>%
filter(residential == 1) %>%
group_by(propaddress, parcel_address) %>%
count() %>%
nrow()
if (x == y) {
print(paste0(x, " = ", y, ": clean collapse"))
} else if (y > x) {
warning("additional observations introduced")
}
jur <- jur %>%
mutate(house_letter = ifelse(str_detect(prophouseno, "[:alpha:]") == 1, 1, 0),
oldadd = propaddress,
new_houseno = ifelse(house_letter == 1,
str_replace(prophouseno, "[:alpha:]", ""),
prophouseno),
propaddress = ifelse(house_letter == 1,
paste(str_replace_all(new_houseno, "-", ""),
propstreetname,
propstreetsuffix,
sep = " "),
propaddress))
jur %>%
filter(house_letter == 1) %>%
select(oldadd, propaddress, category_detail) %>%
head(20)
stopifnot(sum(is.na(jur$propaddress)) == nrow(filter(jur,
is.na(propaddress) | is.na(prophouseno))))
jur <- jur %>%
classify_addresses()
if (TRUE %in% is.na(jur$address_type)) {
warning("NAs in address_type")
}
jur <- jur %>%
mutate(address_type = ifelse(category_detail %in% c("townhouse", "sf attached"),
"single",
address_type))
multiples <- jur %>%
filter(address_type == "multiple")
singles <- jur %>%
filter(address_type == "single")
missing <- jur %>%
filter(address_type == "missing")
View(missing)
nested <- multiples %>%
group_by(propaddress, parcel_address) %>%
summarize_at(vars(zoning,lotsize_sf,
buildingarea, countylandusedescription,
residential, category, category_detail, building_type,
yearbuilt, long, lat), list)
View(nested)
nested <- multiples %>%
group_by(propaddress, parcel_address) %>%
summarize_at(vars(zoning,lotsize_sf,
buildingarea, countylandusedescription,
residential, category, category_detail, building_type,
yearbuilt, long, lat), list) %>%
rename_at(vars(-propaddress, -parcel_address), ~ paste0(., "_list")) %>%
mutate(nprops = map(zoning_list, length),
zoning = map(zoning_list, Mode),
lotsize_sf_sum = map_dbl(lotsize_sf_list, sum, na.rm = TRUE),
buildingarea = map_dbl(buildingarea_list, sum, na.rm = TRUE),
countylandusedescription = map(countylandusedescription_list, Mode),
residential = map(residential_list, max, na.rm = FALSE),
category = map(category_list, Mode),
category_detail = map(category_detail_list, Mode),
building_type = ifelse(category == "MF",
map(building_type_list, Mode),
NA),
long = map(long_list, median),
lat = map(lat_list, median),
# year built handled differently due to missing values
yearbuilt_list = ifelse(as.integer(map(yearbuilt_list, function(x) sum(!is.na(x)))) == 0,
NA,
yearbuilt_list),
yearbuilt = ifelse(!is.na(yearbuilt_list),
map(yearbuilt_list, max, na.rm = TRUE),
NA))
weird <- tibble(propaddress = c( "1330 S FAIR ST", "1633 N COLONIAL TER", "1117 N VERMONT ST", "1134 N STUART ST", "1300 N MEADE ST"),
instance = 1:5)
weird1 <- nested %>%
filter(propaddress %in% weird$propaddress) %>%
left_join(weird, by = "propaddress") %>%
select(instance, propaddress, nprops, lotsize_sf_list, lotsize_sf_sum) %>%
arrange(instance)
